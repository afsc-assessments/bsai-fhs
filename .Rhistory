right = FALSE,
breaks =  mod_2020$lbins))
flc0 <- vroom::vroom(here::here(year, "data", "raw", "fsh_length_data.txt"),
delim = ",",
col_type = c(haul_join = "c",
port_join = "c")) %>%
filter(sex != 'U') %>%
mutate(length   = ifelse(length  < 6, 6,length ),
length  = ifelse(length  >= 58, 58, length ))  %>%
mutate( length_grp0 = cut(length,
right = FALSE,
breaks =  mod_2020$lbins))  %>%
## make integer-based length bin
tidyr::separate(length_grp0, c("first", "second"), sep = ",") %>%
mutate(LENGTH_BIN = as.numeric(substr(first,2,nchar(first))))
summary(flc0)
nrow(flc0)
flc0[is.na(flc0$LENGTH_BIN)]
flc0[is.na(flc0$LENGTH_BIN),]
cut(58, right = FALSE, breaks = c(50,58))
cut(58, right = FALSE, breaks = c(50,59))
mod_2020$lbins
flc0 <- vroom::vroom(here::here(year, "data", "raw", "fsh_length_data.txt"),
delim = ",",
col_type = c(haul_join = "c",
port_join = "c")) %>%
filter(sex != 'U') %>%
mutate(length   = ifelse(length  < 6, 6,length ),
length  = ifelse(length  >= 58, 58, length ))  %>%
mutate( length_grp0 = cut(length,
right = FALSE,
breaks =  c(mod_2020$lbins,59)))  %>%
## make integer-based length bin
tidyr::separate(length_grp0, c("first", "second"), sep = ",") %>%
mutate(LENGTH_BIN = as.numeric(substr(first,2,nchar(first))))
summary(flc0)
flc0 <- vroom::vroom(here::here(year, "data", "raw", "fsh_length_data.txt"),
delim = ",",
col_type = c(haul_join = "c",
port_join = "c")) %>%
filter(sex != 'U') %>%
mutate(length   = ifelse(length  < 6, 6,length ),
length  = ifelse(length  >= 58, 58, length ))  %>%
mutate( length_grp0 = cut(length,
right = FALSE,
breaks =  c(mod_2020$lbins,59)))  %>%
## make integer-based length bin
tidyr::separate(length_grp0, c("first", "second"), sep = ",") %>%
mutate(LENGTH_BIN = as.numeric(substr(first,2,nchar(first)))) %>%
tidytable::mutate(n_h = length(unique(na.omit(haul_join))) + length(unique(na.omit(port_join))), .by = year) %>%
tidytable::mutate(tot = sum(frequency),                                                                                                                                                                                         length(unique(na.omit(port_join))), .by = year) %>%
tidytable::summarise(n_s = mean(tot),
n_h = mean(n_h),
length_tot = sum(frequency),
.by = c(sex,year, LENGTH_BIN)) %>%
tidytable::mutate(prop = length_tot/n_s) %>%
tidytable::left_join(expand.grid(sex = unique(.$sex),
year = unique(.$year),
length = lenbins), .) %>%
tidytable::replace_na(list(prop = 0)) %>%
tidytable::mutate(SA_Index = 1, n_s = mean(n_s, na.rm = T),
n_h = mean(n_h, na.rm = T), .by = year) %>%
tidytable::select(-length_tot) %>%
tidytable::pivot_wider(names_from = LENGTH_BIN, values_from = prop) %>%
select(1:6)
flc0 <- vroom::vroom(here::here(year, "data", "raw", "fsh_length_data.txt"),
delim = ",",
col_type = c(haul_join = "c",
port_join = "c")) %>%
filter(sex != 'U') %>%
mutate(length   = ifelse(length  < 6, 6,length ),
length  = ifelse(length  >= 58, 58, length ))  %>%
mutate( length_grp0 = cut(length,
right = FALSE,
breaks =  c(mod_2020$lbins,59)))  %>%
## make integer-based length bin
tidyr::separate(length_grp0, c("first", "second"), sep = ",") %>%
mutate(LENGTH_BIN = as.numeric(substr(first,2,nchar(first)))) %>%
tidytable::mutate(n_h = length(unique(na.omit(haul_join))) + length(unique(na.omit(port_join))), .by = year) %>%
tidytable::mutate(tot = sum(frequency),                                                                                                                                                                                         length(unique(na.omit(port_join))), .by = year) %>%
tidytable::summarise(n_s = mean(tot),
n_h = mean(n_h),
length_tot = sum(frequency),
.by = c(sex,year, LENGTH_BIN)) %>%
tidytable::mutate(prop = length_tot/n_s) %>%
tidytable::left_join(expand.grid(sex = unique(.$sex),
year = unique(.$year),
length = lenbins), .) %>%
tidytable::replace_na(list(prop = 0)) %>%
tidytable::mutate(SA_Index = 1, n_s = mean(n_s, na.rm = T),
n_h = mean(n_h, na.rm = T), .by = year) %>%
tidytable::select(-length_tot) %>%
tidytable::pivot_wider(names_from = LENGTH_BIN, values_from = prop)
flc0
vroom::vroom(here::here(year, "data", "raw", "fsh_length_data.txt"),
delim = ",",
col_type = c(haul_join = "c",
port_join = "c")) %>%
filter(sex != 'U') %>%
mutate(length   = ifelse(length  < 6, 6,length ),
length  = ifelse(length  >= 58, 58, length ))  %>%
mutate( length_grp0 = cut(length,
right = FALSE,
breaks =  c(mod_2020$lbins,59)))  %>%
## make integer-based length bin
tidyr::separate(length_grp0, c("first", "second"), sep = ",") %>%
mutate(LENGTH_BIN = as.numeric(substr(first,2,nchar(first)))) %>%
tidytable::mutate(n_h = length(unique(na.omit(haul_join))) + length(unique(na.omit(port_join))), .by = year) %>%
tidytable::mutate(tot = sum(frequency),                                                                                                                                                                                         length(unique(na.omit(port_join))), .by = year) %>%
tidytable::summarise(n_s = mean(tot),
n_h = mean(n_h),
length_tot = sum(frequency),
.by = c(sex,year, LENGTH_BIN)) %>%
tidytable::mutate(prop = length_tot/n_s) %>%
tidytable::left_join(expand.grid(sex = unique(.$sex),
year = unique(.$year),
length = lenbins), .) %>%
tidytable::replace_na(list(prop = 0))
flc0 <- vroom::vroom(here::here(year, "data", "raw", "fsh_length_data.txt"),
delim = ",",
col_type = c(haul_join = "c",
port_join = "c")) %>%
filter(sex != 'U') %>%
mutate(length   = ifelse(length  < 6, 6,length ),
length  = ifelse(length  >= 58, 58, length ))  %>%
mutate( length_grp0 = cut(length,
right = FALSE,
breaks =  c(mod_2020$lbins,59)))  %>%
## make integer-based length bin
tidyr::separate(length_grp0, c("first", "second"), sep = ",") %>%
mutate(LENGTH_BIN = as.numeric(substr(first,2,nchar(first)))) %>%
tidytable::mutate(n_h = length(unique(na.omit(haul_join))) + length(unique(na.omit(port_join))), .by = year) %>%
tidytable::mutate(tot = sum(frequency),                                                                                                                                                                                         length(unique(na.omit(port_join))), .by = year) %>%
tidytable::summarise(n_s = mean(tot),
n_h = mean(n_h),
length_tot = sum(frequency),
.by = c(sex,year, LENGTH_BIN)) %>%
tidytable::mutate(prop = length_tot/n_s) %>%
tidytable::left_join(expand.grid(sex = unique(.$sex),
year = unique(.$year),
length = lenbins), .) %>%
tidytable::replace_na(list(prop = 0)) %>%
tidytable::mutate(SA_Index = 1, n_s = mean(n_s, na.rm = T),
n_h = mean(n_h, na.rm = T), .by = year) %>%
tidytable::select(-length_tot) %>%
tidytable::pivot_wider(names_from = LENGTH_BIN, values_from = prop)
flc0
flc0 <- vroom::vroom(here::here(year, "data", "raw", "fsh_length_data.txt"),
delim = ",",
col_type = c(haul_join = "c",
port_join = "c")) %>%
filter(sex != 'U') %>%
mutate(length   = ifelse(length  < 6, 6,length ),
length  = ifelse(length  >= 58, 58, length ))  %>%
mutate( length_grp0 = cut(length,
right = FALSE,
breaks =  c(mod_2020$lbins,59)))  %>%
## make integer-based length bin
tidyr::separate(length_grp0, c("first", "second"), sep = ",") %>%
mutate(LENGTH_BIN = as.numeric(substr(first,2,nchar(first)))) %>%
tidytable::mutate(n_h = length(unique(na.omit(haul_join))) + length(unique(na.omit(port_join))), .by = year) %>%
tidytable::mutate(tot = sum(frequency),                                                                                                                                                                                         length(unique(na.omit(port_join))), .by = year) %>%
tidytable::summarise(n_s = mean(tot),
n_h = mean(n_h),
length_tot = sum(frequency),
.by = c(sex,year, LENGTH_BIN)) %>%
tidytable::mutate(prop = length_tot/n_s) %>%
tidytable::left_join(expand.grid(sex = unique(.$sex),
year = unique(.$year),
length = unique(.$LENGTH_BIN)), .) %>%
tidytable::replace_na(list(prop = 0)) %>%
tidytable::mutate(SA_Index = 1, n_s = mean(n_s, na.rm = T),
n_h = mean(n_h, na.rm = T), .by = year) %>%
tidytable::select(-length_tot) %>%
tidytable::pivot_wider(names_from = LENGTH_BIN, values_from = prop)
flc0
flc0 <- vroom::vroom(here::here(year, "data", "raw", "fsh_length_data.txt"),
delim = ",",
col_type = c(haul_join = "c",
port_join = "c")) %>%
filter(sex != 'U') %>%
mutate(length   = ifelse(length  < 6, 6,length ),
length  = ifelse(length  >= 58, 58, length ))  %>%
mutate( length_grp0 = cut(length,
right = FALSE,
breaks =  c(mod_2020$lbins,59)))  %>%
## make integer-based length bin
tidyr::separate(length_grp0, c("first", "second"), sep = ",") %>%
mutate(LENGTH_BIN = as.numeric(substr(first,2,nchar(first)))) %>%
tidytable::mutate(n_h = length(unique(na.omit(haul_join))) + length(unique(na.omit(port_join))), .by = year) %>%
tidytable::mutate(tot = sum(frequency),                                                                                                                                                                                         length(unique(na.omit(port_join))), .by = year) %>%
tidytable::summarise(n_s = mean(tot),
n_h = mean(n_h),
length_tot = sum(frequency),
.by = c(sex,year, LENGTH_BIN)) %>%
tidytable::mutate(prop = length_tot/n_s) %>%
tidytable::left_join(expand.grid(sex = unique(.$sex),
year = unique(.$year),
length = unique(.$LENGTH_BIN)), .) %>%
tidytable::replace_na(list(prop = 0))
summary(flc0)
vroom::vroom(here::here(year, "data", "raw", "fsh_length_data.txt"),
delim = ",",
col_type = c(haul_join = "c",
port_join = "c")) %>%
filter(sex != 'U') %>%
mutate(length   = ifelse(length  < 6, 6,length ),
length  = ifelse(length  >= 58, 58, length ))  %>%
mutate( length_grp0 = cut(length,
right = FALSE,
breaks =  c(mod_2020$lbins,59)))  %>%
## make integer-based length bin
tidyr::separate(length_grp0, c("first", "second"), sep = ",") %>%
mutate(LENGTH_BIN = as.numeric(substr(first,2,nchar(first)))) %>%
tidytable::mutate(n_h = length(unique(na.omit(haul_join))) + length(unique(na.omit(port_join))), .by = year) %>%
tidytable::mutate(tot = sum(frequency),                                                                                                                                                                                         length(unique(na.omit(port_join))), .by = year) %>%
tidytable::summarise(n_s = mean(tot),
n_h = mean(n_h),
length_tot = sum(frequency),
.by = c(sex,year, LENGTH_BIN)) %>%
tidytable::mutate(prop = length_tot/n_s) %>%
tidytable::left_join(expand.grid(sex = unique(.$sex),
year = unique(.$year),
length = unique(.$LENGTH_BIN)), .) %>%
tidytable::replace_na(list(prop = 0)) %>%
tidytable::mutate(SA_Index = 1,
n_s = mean(n_s, na.rm = T),
n_h = mean(n_h, na.rm = T), .by = year)
summary(vroom::vroom(here::here(year, "data", "raw", "fsh_length_data.txt"),
delim = ",",
col_type = c(haul_join = "c",
port_join = "c")))
afscassess::fish_length_comp
afscassess::fish_length_comp %>% View()
head(flx0)
head(flc0)
flc0 <- vroom::vroom(here::here(year, "data", "raw", "fsh_length_data.txt"),
delim = ",",
col_type = c(haul_join = "c",
port_join = "c"))
head(flc0)
View(afscdata::bsai_fhs())
View(afscdata::bsai_fhs)
q_fish_obs
View(q_fish_obs)
low.nmfs.area
vroom::vroom(here::here(year, "data", "raw", "fsh_specimen_data.txt"),
delim = ",", col_type = c(join_key = "c",
haul_join = "c", port_join = "c"))
library(r4ss)
library(here)
library(dplyr)
library(ggplot2)
theme_set(afscassess::theme_report())
colvec <- c("dodgerblue4", "#ffb703","#219ebc", "#023047",  "#fb8500")
year <- 2024
old_mdl_fldr <- here::here(year,'mgmt','18.2c_2020')
mod18.2c_2020 <- mod_2020 <- SS_output(old_mdl_fldr, verbose = FALSE)
mod02_04 <- SS_output(here::here(year, 'model_runs','02_bridging','02.04_18.2c_2020_ss3v33022wcatches-srvbio-srvcaal-srvlen-fshage'))
SS_plots(mod02_04)
?connect
AKFIN <- connect(db = "akfin")
library(afscdata)
AKFIN <- connect(db = "akfin")
connect(db = "akfin")
?RODBC
??RODBC
sessionInfo()
library(RODBC)
sessionInfo()
require(odbc)
AKFIN <- connect(db = "akfin")
connect
DBI::dbConnect(odbc::odbc(), "akfin", uid = 'mkapur', pwd = 'ssmamk22')
afscdata::connect(db = "akfin")
AKFIN <- afscdata::connect(db = "afsc")
AFSC<-AKFIN
rm(AKFIN)
?bsai_fhs
View(bsai_fhs)
bsai_fhs
afscdata::bsai_fhs()
afscdata::bsai_fhs
akfin = connect()
library(afscdata)
akfin = connect()
?q_fish_obs
dplyr::sql("norpac.debriefed_spcomp_mv")
dplyr::tbl(db, dplyr::sql("norpac.debriefed_spcomp_mv"))
AFSC
AKFIN
## old fishery lcomp routine
## combination of scripts in 2020 get_lcomps_fishery and process_lcomps_fishery
## presets from data.r
AKFIN <- afscdata::connect(db = "akfin")
## old fishery lcomp routine
## combination of scripts in 2020 get_lcomps_fishery and process_lcomps_fishery
## presets from data.r
AKFIN <- afscdata::connect(db = "AKFIN")
AKFIN <- odbcConnect("AKFIN",'mkapur','ssmamk22',  believeNRows = FALSE)
AKFIN <- RODBC::odbcConnect("AKFIN",'mkapur','ssmamk22',  believeNRows = FALSE)
# devtools::install_github('r4ss/r4ss')
library(gapindex)
library(afscdata)
library(afscassess)
library(r4ss)
library(dplyr)
library(here)
library(ggplot2)
theme_set(afscassess::theme_report())
## old fishery lcomp routine
## combination of scripts in 2020 get_lcomps_fishery and process_lcomps_fishery
## presets from data.r
AKFIN <- afscdata::connect(db = "AKFIN")
AFSC <- afscdata::connect(db = "afsc")
## Flathead sole only = 103, Rex = 105, Dover = 107, Bering flounder = 145, GT = 102, Deepsea sole = 110
## Setup options for flathead sole in BSAI
final_year <- 2020
fsh_sp_area <- "'BS','AI'"              # FMP
fsh_sp_label <- "'FSOL'"                # AKFIN group species label
## Flathead sole only = 103, Rex = 105, Dover = 107, Bering flounder = 145, GT = 102, Deepsea sole = 110
## Setup options for flathead sole in BSAI
final_year <- 2024
fsh_sp_area <- "'BS','AI'"              # FMP
fsh_sp_label <- "'FSOL'"                # AKFIN group species label
fsh_sp_str <- "103"                     # AKFIN species code
fsh_start_yr <- 1977                    # start year
sp_area <- "'BS'"                       #
## length bins to use for fsh and srv length comp data
max_size <- 40 ##65 = rex ##70 = Dover and Flathead
min_size <- 6
bin_width <- 2
len_bins <- c(seq(min_size,max_size,bin_width),43,46,49,52,55,58)
## NMFS_AREA between 500 and 544 for BSAI, above 600 for GOA
species <- 103
low.nmfs.area <- "'500'" #"'600'" #500
hi.nmfs.area <- "'544'" #"'699'"  #544
SpeciesCode = "103"
## Potentially unbury the choices for FmpArea for max flexibility.
FmpArea <- "'BS'" #Options are 'AI' = 539-544 'GOA' = 600 to 699 'BS' = 500 to 539
message("Querying haul info for domestic fishery...")
lcompq <- paste0(
"SELECT OBSINT.DEBRIEFED_LENGTH.HAUL_JOIN,\n ",
"OBSINT.DEBRIEFED_LENGTH.SPECIES,\n ",
"OBSINT.DEBRIEFED_LENGTH.SEX,\n ",
"OBSINT.DEBRIEFED_LENGTH.LENGTH,\n ",
"OBSINT.DEBRIEFED_LENGTH.FREQUENCY,\n ",
"OBSINT.DEBRIEFED_LENGTH.YEAR,\n ",
"OBSINT.DEBRIEFED_LENGTH.GEAR,\n ",
"OBSINT.DEBRIEFED_LENGTH.NMFS_AREA,\n ",
"SUBSTR(TO_CHAR(OBSINT.DEBRIEFED_LENGTH.HAUL_JOIN),9,19) AS LAST1,\n ",
"SUBSTR(TO_CHAR(OBSINT.DEBRIEFED_LENGTH.HAUL_JOIN),1,8) AS FIRST1\n ",
"FROM OBSINT.DEBRIEFED_LENGTH\n ",
"INNER JOIN OBSINT.DEBRIEFED_HAUL\n ",
"ON OBSINT.DEBRIEFED_HAUL.HAUL_JOIN    = OBSINT.DEBRIEFED_LENGTH.HAUL_JOIN\n ",
"WHERE OBSINT.DEBRIEFED_LENGTH.SPECIES = ",species,"\n ",
"AND OBSINT.DEBRIEFED_LENGTH.NMFS_AREA BETWEEN ",low.nmfs.area," AND ",hi.nmfs.area)
write.csv(here::here(year,'data','raw','hauls_fishery_domestic.csv'), x=hauls_fishery_domestic, row.names=FALSE)
hauls_fishery_domestic <- sqlQuery(AFSC,lcompq)
??sqlQuery
## old fishery lcomp routine
## combination of scripts in 2020 get_lcomps_fishery and process_lcomps_fishery
## presets from data.r
library(RODBC)
hauls_fishery_domestic <- sqlQuery(AFSC,lcompq)
AFSC
## must be on VPN WEST
username_AFSC <- showPrompt(title="Username", message="Enter your AFSC username:", default="")
library(rstudioapi)
## must be on VPN WEST
username_AFSC <- showPrompt(title="Username", message="Enter your AFSC username:", default="")
password_AFSC <- askForPassword(prompt="Enter your AFSC password:")
AFSC <- odbcConnect("AFSC",username_AFSC,password_AFSC,  believeNRows = FALSE)
password_AFSC <- askForPassword(prompt="Enter your AFSC password:")
AFSC <- odbcConnect("AFSC",username_AFSC,password_AFSC,  believeNRows = FALSE)
username_AKFIN <- showPrompt(title="Username", message="Enter your AKFIN username:", default="")
password_AKFIN <- askForPassword(prompt="Enter your AKFIN password:")
AKFIN <- odbcConnect("AKFIN",username_AKFIN,password_AKFIN,  believeNRows = FALSE)
hauls_fishery_domestic <- sqlQuery(AFSC,lcompq)
if(!is.data.frame(hauls_fishery_domestic)) stop("Query failed")
hauls_fishery_domestic$ID <- paste0(hauls_fishery_domestic$FIRST1, hauls_fishery_domestic$LAST1)
hauls_fishery_domestic <- select(hauls_fishery_domestic, -FIRST1, LAST1)
write.csv(here::here(year,'data','raw','hauls_fishery_domestic.csv'), x=hauls_fishery_domestic, row.names=FALSE)
message("Querying haul info for foreign fishery...")
## NORPAQ number of hauls and individuals: Add NORPAQ query for
## foreign hauls (don't think you can split by
## nonpelagic/pelagic) here the FOREIGN_HAUL table needs to be
## joined to the FOREIGN_LENGTH table because foreign haul has
## info on the nmfs areas (called GENERIC_AREA) where fishing
## occurred and the length table is missing that.
lcompq <-paste0("SELECT NORPAC.FOREIGN_LENGTH.SPECIES,\n ",
"NORPAC.FOREIGN_LENGTH.SEX,\n ",
"NORPAC.FOREIGN_LENGTH.YEAR,\n ",
"NORPAC.FOREIGN_LENGTH.FREQUENCY,\n ",
"NORPAC.FOREIGN_HAUL.GENERIC_AREA,\n ",
"NORPAC.FOREIGN_LENGTH.SIZE_GROUP,\n ",
"NORPAC.FOREIGN_HAUL.HAUL_JOIN,\n ",
"NORPAC.FOREIGN_HAUL.HOOKS_PER_SKATE,\n ",
"NORPAC.FOREIGN_HAUL.NUMBER_OF_POTS\n ",
"FROM NORPAC.FOREIGN_LENGTH\n ",
"INNER JOIN NORPAC.FOREIGN_HAUL\n ",
"ON NORPAC.FOREIGN_HAUL.HAUL_JOIN    = NORPAC.FOREIGN_LENGTH.HAUL_JOIN\n ",
"WHERE NORPAC.FOREIGN_LENGTH.SPECIES = ",species,"\n ",
"AND NORPAC.FOREIGN_HAUL.GENERIC_AREA BETWEEN ",low.nmfs.area," AND ",hi.nmfs.area)
low.nmfs.area
hauls_fishery_foreign <- sqlQuery(AFSC, lcompq)
hauls_fishery_foreign <- hauls_fishery_foreign[hauls_fishery_foreign$GENERIC_AREA != 670,]
hauls_fishery_foreign$ID <-hauls_fishery_foreign$HAUL_JOIN
write.csv(here::here(year,'data','raw','hauls_fishery_foreign.csv'), x=hauls_fishery_foreign, row.names=FALSE)
FmpArea
FmpArea
message('Querying domestic fishery lengths..')
if(FmpArea=="'AI'") region<-"539 and 544"
if(FmpArea=="'GOA'") region<-"600 and 699"
if(FmpArea=="'BS'") region<-"500 and 539"
test <- paste0("SELECT OBSINT.DEBRIEFED_SPCOMP.HAUL_JOIN,\n ",
"OBSINT.DEBRIEFED_LENGTH.HAUL_JOIN AS HAUL_JOIN1,\n ",
"OBSINT.DEBRIEFED_SPCOMP.EXTRAPOLATED_WEIGHT,\n ",
"OBSINT.DEBRIEFED_SPCOMP.EXTRAPOLATED_NUMBER,\n ",
"OBSINT.DEBRIEFED_SPCOMP.YEAR,\n ",
"OBSINT.DEBRIEFED_SPCOMP.SPECIES,\n ",
"OBSINT.DEBRIEFED_LENGTH.GEAR,\n ",
"OBSINT.DEBRIEFED_LENGTH.NMFS_AREA,\n ",
"OBSINT.DEBRIEFED_LENGTH.SEX AS SEX,\n ",
"OBSINT.DEBRIEFED_LENGTH.LENGTH,\n ",
"OBSINT.DEBRIEFED_LENGTH.FREQUENCY,\n ",
"OBSINT.DEBRIEFED_LENGTH.VESSEL_TYPE,\n ",
"SUBSTR(TO_CHAR(OBSINT.DEBRIEFED_LENGTH.HAUL_JOIN),9,19) AS LAST1,\n ",
"SUBSTR(TO_CHAR(OBSINT.DEBRIEFED_LENGTH.HAUL_JOIN),1,8) AS FIRST1\n ",
"FROM OBSINT.DEBRIEFED_SPCOMP\n ",
"INNER JOIN OBSINT.DEBRIEFED_LENGTH\n ",
"ON OBSINT.DEBRIEFED_SPCOMP.HAUL_JOIN    = OBSINT.DEBRIEFED_LENGTH.HAUL_JOIN\n ",
"WHERE OBSINT.DEBRIEFED_SPCOMP.SPECIES   = ", fsh_sp_str, "\n ",
"AND OBSINT.DEBRIEFED_LENGTH.NMFS_AREA BETWEEN ",region,"\n ",
"AND OBSINT.DEBRIEFED_LENGTH.SPECIES in (",fsh_sp_str,")\n ",
"ORDER BY OBSINT.DEBRIEFED_LENGTH.YEAR")
lengths_dom <- sqlQuery(AFSC,test)
if(!is.data.frame(lengths_dom)) stop('Failed query')
region
fsh_sp_str
if(!is.data.frame(lengths_dom)) stop('Failed query')
## Note that in 2020 the ID had NAs in it.. does that break it?
lengths_dom$ID <- with(lengths_dom, paste0(FIRST1,LAST1))
saveRDS(lengths_dom, file=here::here(year,'data','raw','lengths_fishery_domestic.RDS'))
#* foreign lengths----
message('Querying foreign fishery lengths..')
test <- paste("SELECT NORPAC.FOREIGN_LENGTH.HAUL_JOIN,\n ",
"NORPAC.FOREIGN_LENGTH.SPECIES,\n ",
"NORPAC.FOREIGN_LENGTH.SEX,\n ",
"NORPAC.FOREIGN_LENGTH.SIZE_GROUP,\n ",
"NORPAC.FOREIGN_LENGTH.YEAR,\n ",
"NORPAC.FOREIGN_LENGTH.FREQUENCY,\n ",
"NORPAC.FOREIGN_SPCOMP.SPECIES_HAUL_NUMBER,\n ",
"NORPAC.FOREIGN_SPCOMP.SPECIES_HAUL_WEIGHT,\n ",
"NORPAC.FOREIGN_HAUL.GENERIC_AREA,\n ",
"NORPAC.FOREIGN_HAUL.HOOKS_PER_SKATE,\n ",
"NORPAC.FOREIGN_HAUL.NUMBER_OF_POTS\n ",
"FROM NORPAC.FOREIGN_HAUL\n ",
"INNER JOIN NORPAC.FOREIGN_LENGTH\n ",
"ON NORPAC.FOREIGN_HAUL.HAUL_JOIN = NORPAC.FOREIGN_LENGTH.HAUL_JOIN\n ",
"INNER JOIN NORPAC.FOREIGN_SPCOMP\n ",
"ON NORPAC.FOREIGN_HAUL.HAUL_JOIN    = NORPAC.FOREIGN_SPCOMP.HAUL_JOIN\n ",
"WHERE NORPAC.FOREIGN_LENGTH.SPECIES in (",fsh_sp_str,")\n ",
"AND NORPAC.FOREIGN_HAUL.GENERIC_AREA between ",region,sep="")
lengths_fishfor <- sqlQuery(AFSC,test)
lengths_fishfor$GEAR <- 1
lengths_fishfor$GEAR[lengths_fishfor$HOOKS_PER_SKATE > 0] <- 8
lengths_fishfor$GEAR[lengths_fishfor$NUMBER_OF_POTS > 0] <- 6
lengths_fishfor <- select(lengths_fishfor, -HOOKS_PER_SKATE,
-NUMBER_OF_POTS)
saveRDS(lengths_fishfor, file=here::here(year,'data','raw','lengths_fishery_foreign.RDS'))
gear
with_unsexed
## in 2015 for the GOA species (and based on calcs that were done
## in 2014 for BSAI flathead) Can be run for non-pelagic gear
## only or pelagic gear only, or all gears (for the domestic
## number of haulss) There is no gear delineation in the foreign
## data query This should not matter for GOA Rex because nearly
## all the data are non-pelagic trawl NORPAQ gear type does not
## appear to be recorded in NORPAQ.FOREIGN_LENGTH or
## NORPAQ.FOREIGN_HAUL.  The number of hauls from this code may
## need to be combined with PortStats.R for number of tows that
## come from port data, if using port data.
haulsd <- read.csv(here::here(year,'data','raw','hauls_fishery_domestic.csv'))
with_unsexed
gear <- "nonpelagic"
with_unsexed <- FALSE
if(gear!='nonpelagic') stop("not set up for a gear other than nonpelagic")
if(with_unsexed) stop("not set up to use unsexed fish")
## in 2015 for the GOA species (and based on calcs that were done
## in 2014 for BSAI flathead) Can be run for non-pelagic gear
## only or pelagic gear only, or all gears (for the domestic
## number of haulss) There is no gear delineation in the foreign
## data query This should not matter for GOA Rex because nearly
## all the data are non-pelagic trawl NORPAQ gear type does not
## appear to be recorded in NORPAQ.FOREIGN_LENGTH or
## NORPAQ.FOREIGN_HAUL.  The number of hauls from this code may
## need to be combined with PortStats.R for number of tows that
## come from port data, if using port data.
haulsd <- read.csv(here::here(year,'data','raw','hauls_fishery_domestic.csv'))
## ID replaces HAUL_JOIN because HAUL_JOIN is too long to read
## into R correctly.
if(!with_unsexed) haulsd <- haulsd[haulsd$SEX!="U",]
if(gear=="nonpelagic") haulsd <- haulsd[haulsd$GEAR==1,]
## if(gear=="pelagic") haulsd <- haulsd[haulsd$GEAR==2,]
hauls.domestic.df <- rename(haulsd, year=YEAR) %>% group_by(year) %>%
summarize(nhauls_tot=length(unique(ID)),
ninds_tot=sum(FREQUENCY),
nhauls_female=length(unique(ID[SEX=="F"])),
ninds_female=sum(FREQUENCY[SEX=="F"]),
nhauls_male=length(unique(ID[SEX=="M"])),
ninds_male=sum(FREQUENCY[SEX=="M"]), .groups='drop')
