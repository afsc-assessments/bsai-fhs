)
p0 <- ggplot(df, aes(x, y)) +
geom_point(alpha = 1, size = 1.5) +
theme_bw(20) +
theme(axis.title = element_blank()) +
coord_fixed(xlim = c(-3.5, 3.5), ylim = c(-3.5, 3.5), expand = FALSE)
p1 <- p0 +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
p2 <- ggplot(df, aes(x, y)) +
geom_density2d_filled() +
scale_x_continuous(lim = c(-3.5, 3.5)) +
scale_y_continuous(lim = c(-3.5, 3.5)) +
coord_fixed(xlim = c(-3.5, 3.5), ylim = c(-3.5, 3.5), expand = FALSE) +
theme_bw(20) +
labs(fill = NULL) +
theme(
legend.position = "bottom",
axis.title = element_blank()
)
p3 <- ggplot(df, aes(x, y)) +
geom_hdr() +
coord_fixed(xlim = c(-3.5, 3.5), ylim = c(-3.5, 3.5), expand = FALSE) +
theme_bw(22) +
labs(alpha = NULL) +
theme(
axis.title = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "bottom"
)
p4 <- p2 +
geomtextpath::geom_textdensity2d(
aes(level = after_stat(probs)), stat = "hdr_lines", straight = TRUE,
size = 8, linewidth = 1.5, color = "white", alpha = 1,
xlim = c(-3.5, 3.5), ylim = c(-3.5, 3.5)
)
install.packages('geomtextpath')
#| include: false
library("here")
library("tidyverse")
library("patchwork")
library("ggdensity")
theme_set(theme_bw(13))
theme_update(
panel.grid.minor = element_blank()
)
set.seed(1)
n <- 2500
# Simulating data
df <- tibble(
x = rnorm(n),
y = rnorm(n)
)
p0 <- ggplot(df, aes(x, y)) +
geom_point(alpha = 1, size = 1.5) +
theme_bw(20) +
theme(axis.title = element_blank()) +
coord_fixed(xlim = c(-3.5, 3.5), ylim = c(-3.5, 3.5), expand = FALSE)
p1 <- p0 +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
p2 <- ggplot(df, aes(x, y)) +
geom_density2d_filled() +
scale_x_continuous(lim = c(-3.5, 3.5)) +
scale_y_continuous(lim = c(-3.5, 3.5)) +
coord_fixed(xlim = c(-3.5, 3.5), ylim = c(-3.5, 3.5), expand = FALSE) +
theme_bw(20) +
labs(fill = NULL) +
theme(
legend.position = "bottom",
axis.title = element_blank()
)
p3 <- ggplot(df, aes(x, y)) +
geom_hdr() +
coord_fixed(xlim = c(-3.5, 3.5), ylim = c(-3.5, 3.5), expand = FALSE) +
theme_bw(22) +
labs(alpha = NULL) +
theme(
axis.title = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "bottom"
)
p4 <- p2 +
geomtextpath::geom_textdensity2d(
aes(level = after_stat(probs)), stat = "hdr_lines", straight = TRUE,
size = 8, linewidth = 1.5, color = "white", alpha = 1,
xlim = c(-3.5, 3.5), ylim = c(-3.5, 3.5)
)
aligned_plots <- align_patches(p0, p1, p2, p3, p4)
#| fig-height: 10
#| fig-width: 9
aligned_plots[[1]]
#| fig-height: 10
#| fig-width: 9
aligned_plots[[3]]
#| fig-height: 10
#| fig-width: 9
aligned_plots[[2]]
#| fig-height: 10
#| fig-width: 9
aligned_plots[[4]]
#| fig-height: 10
#| fig-width: 9
aligned_plots[[3]]
#| fig-height: 10
#| fig-width: 9
aligned_plots[[5]]
set.seed(1)
df <- tibble(
x = rnorm(1000),
y = rnorm(1000)
)
p_points <- ggplot(df, aes(x, y)) +
geom_point(size = .8) +
coord_fixed(xlim = c(-3.75, 3.75), ylim = c(-3.75, 3.75), expand = FALSE) +
theme_bw(9)
p_kde <- ggplot(df, aes(x, y)) +
geom_hdr(xlim = c(-3.75, 3.75), ylim = c(-3.75, 3.75)) +
coord_fixed(xlim = c(-3.75, 3.75), ylim = c(-3.75, 3.75), expand = FALSE) +
theme_bw(9) +
theme(legend.position = "none")
p_hist <- ggplot(df, aes(x, y)) +
geom_hdr(method = "histogram", xlim = c(-3.75, 3.75), ylim = c(-3.75, 3.75)) +
coord_fixed(xlim = c(-3.75, 3.75), ylim = c(-3.75, 3.75), expand = FALSE) +
theme_bw(9) +
theme(legend.position = "none")
p_param <- ggplot(df, aes(x, y)) +
geom_hdr(method = "mvnorm", xlim = c(-3.75, 3.75), ylim = c(-3.75, 3.75)) +
coord_fixed(xlim = c(-3.75, 3.75), ylim = c(-3.75, 3.75), expand = FALSE) +
theme_bw(9) +
theme(legend.position = "none")
aligned_plots <- align_patches(p_points, p_kde, p_param, p_hist)
#| echo: true
#| eval: false
df <- tibble(x = rnorm(1000), y = rnorm(1000))
ggplot(df, aes(x, y)) +
geom_point()
#| fig-height: 4
aligned_plots[[1]]
#| echo: true
#| eval: false
df <- tibble(x = rnorm(1000), y = rnorm(1000))
ggplot(df, aes(x, y)) +
geom_hdr()
#| fig-height: 4
aligned_plots[[2]]
#| code-line-numbers: "|5"
#| echo: true
#| eval: false
df <- tibble(x = rnorm(1000), y = rnorm(1000))
ggplot(df, aes(x, y)) +
geom_hdr(
method = "kde"
)
#| fig-height: 4
aligned_plots[[2]]
#| code-line-numbers: "5"
#| echo: true
#| eval: false
df <- tibble(x = rnorm(1000), y = rnorm(1000))
ggplot(df, aes(x, y)) +
geom_hdr(
method = "mvnorm"
)
#| fig-height: 4
aligned_plots[[3]]
#| code-line-numbers: "5"
#| echo: true
#| eval: false
df <- tibble(x = rnorm(1000), y = rnorm(1000))
ggplot(df, aes(x, y)) +
geom_hdr(
method = "histogram"
)
#| fig-height: 4
aligned_plots[[4]]
#| eval: false
library("purrr")
df_norm <- data.frame("x" = rnorm(5000), "y" = rnorm(5000))
df_norm_mix <- data.frame(
"x" = rnorm(5000) + c(-1.5, 1.5),
"y" = rnorm(5000) + c(1.5, -1.5)
)
df_exp <- data.frame("x" = rexp(5000, 1), "y" = rexp(5000, 1))
p_df <- function(df) {
ggplot(df, aes(x, y)) +
theme(
legend.position = "none",
axis.text.x = element_blank(), axis.ticks.x = element_blank(),
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
axis.title = element_blank()
)
}
p_row <- function(layer, title, ylabs = FALSE) {
p_title <- grid::textGrob(title, gp = grid::gpar(fontsize = 18))
p_norm <- p_df(df_norm) +
layer +
coord_fixed(xlim = c(-3.5, 3.5), ylim = c(-3.5, 3.5))
p_norm_mix <- p_df(df_norm_mix) +
layer +
coord_fixed(xlim = c(-4.5, 4.5), ylim = c(-4.5, 4.5))
p_norm_exp <- p_df(df_exp) +
layer + coord_fixed(xlim = c(-.25, 6), ylim = c(-.25, 6))
list(p_title, p_norm, p_norm_mix, p_norm_exp)
}
geoms <- list(
geom_point(size = .5, alpha = .6),
# geom_density_2d_filled(),
# extreme xlim, ylim ensure that HDRs aren't clipped
geom_hdr(method = "kde", xlim = c(-10, 10), ylim = c(-10, 10)),
geom_hdr(method = "mvnorm", xlim = c(-10, 10), ylim = c(-10, 10)),
geom_hdr(method = "histogram"),
geom_hdr(method = "freqpoly", xlim = c(-10, 10), ylim = c(-10, 10))
)
titles <- c(
"",
"kde",
"mvnorm",
"histogram",
"freqpoly"
)
map2(geoms, titles, p_row) |>
unlist(recursive = FALSE) |>
wrap_plots(byrow = FALSE, nrow = 4, heights = c(.02, 1, 1, 1), widths = 1)
quarto::quarto_render('presentation/smartkickoff.rmd')
install.packages('palmerpenguins')
quarto::quarto_render('presentation/smartkickoff.rmd')
#| fig-height: 4
# plot options:
y_lim <- c(-.0375, .41)
loly_width <- 1.2
loly_point <- 2.5
loly_width_outline <- 1.45
loly_point_outline <- 1.75
hline_size <- .6
label_size <- 3.25
label_margin <- unit(.1, "lines")
label_x_loc <- -2
label_digits <- 3
HDR_size <- 4.75
HDR_y_loc <- -.018
p1 <- ggplot() +
geom_function(fun = dnorm, xlim = c(-3.5, 3.5)) +
labs(x = NULL, y = NULL)
grid <- tibble(
# Slightly asymmetric to prevent issues with f(x) = f(-x)?
x = seq(-3.5, 3.6, length.out = 26),
f = dnorm(x),
f_disc = f / sum(f)
)
p2 <- ggplot(grid, aes(x, f, color = f)) +
geom_segment(aes(xend = x, yend = 0), size = loly_width) +
geom_point(size = loly_point) +
scale_color_viridis_c(option = "magma", begin = .8, end = 0) +
labs(x = NULL, y = NULL) +
guides(
color = "none"
)
grid <- grid |>
arrange(desc(f)) |>
mutate(prob = cumsum(f_disc))
find_cutoff <- function(cutoffs, df) {
if (length(cutoffs) > 1) return(vapply(cutoffs, find_cutoff, numeric(1), df))
df |>
filter(prob >= cutoffs) |>
pluck("f", 1)
}
# These assume unimodality
find_x_l <- function(cutoffs, df) {
if (length(cutoffs) > 1) return(vapply(cutoffs, find_x_l, numeric(1), df))
df |>
filter(f >= cutoffs) |>
pluck("x") |>
min()
}
find_x_u <- function(cutoffs, df) {
if (length(cutoffs) > 1) return(vapply(cutoffs, find_x_u, numeric(1), df))
df |>
filter(f >= cutoffs) |>
pluck("x") |>
max()
}
cutoff_df <- tibble(
probs = c(.50, .80, .95, .99),
alpha = 1 - probs,
cutoffs = find_cutoff(probs, grid),
x_l = find_x_l(cutoffs, grid),
x_u = find_x_u(cutoffs, grid)
) |>
arrange(desc(probs))
ex_cutoff <- .25
ex_prob <- sum(grid$f_disc[grid$f >= ex_cutoff])
p3 <- p2 +
geom_hline(aes(yintercept = cutoffs, color = cutoffs), size = hline_size, cutoff_df) +
geom_label(aes(x = label_x_loc, y = cutoffs, color = cutoffs), cutoff_df, size = label_size, label.padding = label_margin,
label = glue::glue("f[{cutoff_df$alpha}] == {round(cutoff_df$cutoffs, label_digits)}"), parse = TRUE) +
geom_segment(aes(y = HDR_y_loc, yend = HDR_y_loc, x = x_l, xend = x_u, color = cutoffs), size = HDR_size, cutoff_df, inherit.aes = FALSE)
p2_linetype <- ggplot(grid, aes(x, f, color = f)) +
geom_segment(aes(xend = x, y = 0, yend = f, linetype = if_else(f >= ex_cutoff, "solid", "11")), size = loly_width) +
geom_point(aes(alpha = if_else(f >= ex_cutoff, 1, .4)), size = loly_point) +
geom_point(shape = 21, fill = NA, size = loly_point) +
geom_hline(aes(yintercept = ex_cutoff, color = ex_cutoff), size = hline_size) +
geom_label(aes(x = label_x_loc, y = ex_cutoff, color = ex_cutoff), cutoff_df, size = label_size, label.padding = label_margin,
label = glue::glue("tau == {ex_cutoff}"), parse = TRUE) +
scale_linetype_identity() +
scale_alpha_identity() +
scale_color_viridis_c(option = "magma", begin = .8, end = 0) +
labs(x = NULL, y = NULL) +
guides(
linetype = "none",
color = "none"
)
(p1 +
(p2_linetype + p3 &
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
) &
scale_x_continuous(breaks = c(-2, 0, 2)) &
coord_cartesian(xlim = c(-2.8, 2.8), ylim = c(-.035, .44), expand = FALSE)) +
plot_layout(widths = c(1, 2))
#| fig-height: 4
# plot options:
y_lim <- c(-.0345, .44)
data_point_size <- .4
set.seed(1)
df <- tibble(x = rnorm(200))
df_kde <- density(df$x, n = 500) |>
with(tibble(x = x, probs = y)) |>
mutate(probs_d = probs / sum(probs))
set.seed(1) # (for jittering)
p1 <- ggplot(df_kde, aes(x, probs)) +
geom_line() +
geom_jitter(aes(x, y = .01), df, height = .025, size = data_point_size) +
labs(x = NULL, y = NULL) +
coord_cartesian(ylim = y_lim, expand = FALSE)
df_kde <- df_kde |>
slice(round(seq(1, 500, length.out = 26))) |>
mutate(probs_d = probs / sum(probs))
p2 <- ggplot(df_kde, aes(x, probs, color = probs)) +
geom_segment(aes(xend = x, yend = 0), size = loly_width) +
geom_point(size = loly_point) +
scale_color_viridis_c(option = "magma", begin = .8, end = 0) +
labs(x = NULL, y = NULL) +
guides(
color = "none"
)
df_kde <- df_kde |>
arrange(desc(probs)) |>
mutate(f = probs, prob = cumsum(probs_d))
cutoff_df <- tibble(
probs = c(.50, .80, .95, .99),
alpha = 1 - probs,
cutoffs = find_cutoff(probs, df_kde),
x_l = find_x_l(cutoffs, df_kde),
x_u = find_x_u(cutoffs, df_kde)
) |>
arrange(desc(probs))
ex_cutoff <- .25
ex_prob <- sum(df_kde$probs_d[df_kde$probs >= ex_cutoff])
p3 <- p2 +
geom_hline(aes(yintercept = cutoffs, color = cutoffs), size = hline_size, cutoff_df) +
geom_label(aes(x = label_x_loc, y = cutoffs, color = cutoffs), cutoff_df, size = label_size, label.padding = label_margin,
label = glue::glue("widehat(f)[{cutoff_df$alpha}] == {round(cutoff_df$cutoffs, label_digits)}"), parse = TRUE) +
geom_segment(aes(y = HDR_y_loc, yend = HDR_y_loc, x = x_l, xend = x_u, color = cutoffs), size = HDR_size, cutoff_df, inherit.aes = FALSE)
p2_linetype <- ggplot(df_kde, aes(x, f, color = f)) +
geom_segment(aes(xend = x, y = 0, yend = f, linetype = if_else(f >= ex_cutoff, "solid", "11")), size = loly_width) +
geom_point(aes(alpha = if_else(f >= ex_cutoff, 1, .4)), size = loly_point) +
geom_point(shape = 21, fill = NA, size = loly_point) +
geom_hline(aes(yintercept = ex_cutoff, color = ex_cutoff), size = hline_size) +
geom_label(aes(x = label_x_loc, y = ex_cutoff, color = ex_cutoff), cutoff_df, size = label_size, label.padding = label_margin,
label = glue::glue("tau == {ex_cutoff}"), parse = TRUE) +
scale_linetype_identity() +
scale_alpha_identity() +
scale_color_viridis_c(option = "magma", begin = .8, end = 0) +
labs(x = NULL, y = NULL) +
guides(
linetype = "none",
color = "none"
) +
coord_cartesian(ylim = y_lim, expand = FALSE)
(p1 +
(p2_linetype + p3 &
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
) &
scale_x_continuous(breaks = c(-2, 0, 2)) &
coord_cartesian(xlim = c(-2.8, 2.8), ylim = c(-.035, .44), expand = FALSE)) +
plot_layout(widths = c(1, 2))
quarto::quarto_render(input = 'presentation/smartkickoff.rmd', output_format = 'html', output_file = 'presentation/smartkickoff.html')
quarto::quarto_preview(file = 'presentations/smartkickoff.html')
quarto::quarto_preview(file = 'presentation/smartkickoff.html')
?quarto::quarto_preview
quarto::quarto_preview(file = 'presentation/smartkickoff.rmd')
quarto::quarto_preview(file = 'presentation/smartkickoff.rmd', open = utils::browseURL)
quarto_preview()
require(quarto)
quarto_preview()
quarto::quarto_preview(file = 'presentation/smartkickoff.rmd', open = utils::browseURL)
quarto::quarto_preview(file = 'presentation/smartkickoff.rmd')
quarto::quarto_preview(file = 'presentation/smartkickoff.rmd', browse = TRUE)
setwd(here('presentation'))
quarto::quarto_preview(file = 'presentation/smartkickoff.rmd', browse = TRUE)
quarto::quarto_preview(file = 'smartkickoff.rmd', browse = TRUE)
require(quarto)
safe = read.csv(here('tables','safe_table.csv'))
require(here)
safe = read.csv(here('tables','safe_table.csv'))
head(safe)
xtable(safe)
require(xtable)
xtable(safe)
save(xtable(safe), file = here("tables","safe_xtable.txt"))
safex <- xtable(safe); save(safex, file = here("tables","safe_xtable.txt"))
dt <- read.table(here('tables','safe_xtable.txt'))
read.table(here('tables','safe_xtable.txt'))
dt <- read.table(here('tables','safe_table.csv'))
dt <- read.csv(here('tables','safe_table.csv'))
kbl(dt, booktabs = T) %>%
kable_styling(latex_options = "striped")
require(dplyr)
kbl(dt, booktabs = T) %>%
kable_styling(latex_options = "striped")
library("kable")
??kable
library(kableExtra)
kbl(dt, booktabs = T) %>%
kable_styling(latex_options = "striped")
?kable_styling
kbl(dt, booktabs = T, col.names = c("Space in name",
"(Special Characters)",
"$\\delta{m}_1$",
"Space in name"))) %>%
kbl(dt, booktabs = T, col.names = c("Space in name",
"(Special Characters)",
"$\\delta{m}_1$",
"Space in name")) %>%
kable_styling(latex_options = "striped", font_size = 15)
dt
kbl(dt, booktabs = T, col.names = c("","Space in name",
"(Special Characters)",
"$\\delta{m}_1$",
"Space in name")) %>%
kable_styling(latex_options = "striped", font_size = 15)
dt
dt <- read.csv(here('tables','safe_table.csv'))
kbl(dt, booktabs = T, col.names = c("",
"2022",
"2023",
"2023",
"2024")) %>%
kable_styling(latex_options = "striped", font_size = 15)
date_use
here('figs',paste0(date_use,"-Fig1_catchvsbio.png"))
require(here)
here('figs',paste0(date_use,"-Fig1_catchvsbio.png"))
require(lubridate)
require(here)
require(dplyr)
## text values
spp = c('Flathead sole','Hippoglossoides esassodon', 'Hippoglossoides spp.', 'Bering flounder')
date_use = "2022-05-31" ## for file loading
date_use_long = paste0(month(date_use, label = T), " ",day(date_use),", ",year(date_use))
date_pull = "2022-10-01"
date_pull_long = paste0(month(date_pull, label = T), " ",day(date_pull),", ",year(date_pull))
thisyr = lubridate::year(Sys.Date())
lastyr = thisyr-1
nextyr = thisyr+1
proj_years = nextyr:(thisyr+2)
proj_range = paste0(range(proj_years), collapse = "-")
## read tables
load(here('data',paste0(date_use,'-catches_for_proj.rdata'))) ## catchvec
cproj = round(data.frame(catchvec)); names(cproj)=c('year','catch')
surv = round(read.csv(here('data',paste0(date_use,"-ss_survey_index.csv"))))
table2 <- read.csv(here('tables',paste0(date_use,'-survey_by_spp.csv')))
table2
kableExtra::kable(table2, format.args = list(big.mark = ','), digits = 2,
caption = paste0("Table 2. Survey biomass in tons and coefficient of variation (CV) of Hippoglossoides spp. combined (flathead sole and Bering flounder) across the entire BSAI; flathead sole only in the Aleutian Islands, Hippoglossoides spp. combined in the Eastern Bering Sea (EBS) shelf survey, flathead sole only in EBS shelf survey, and Bering flounder only in the EBS shelf survey. Slight discrepancies in totals may occur due to rounding. Bolded years are not included in base model.'Data accessed via Oracle database query on ",date_use_long,".")) %>%
kableExtra::kable_styling("striped")
table1 <-  read.csv(here('tables',paste0(date_use,'-catch_proportions.csv')))
class(r t1, echo = FALSE)
class(table1)
class(table2)
table2 <- read.csv(here('tables',paste0(date_use,'-survey_by_spp.csv')))
table2
table2$year <- as.character(table2$year)
table2[is.na(table2)] <-""
class(table2)
table1 <-  read.csv(here('tables',paste0(date_use,'-catch_proportions.csv')))
names(table1) <- c('Year',paste0('Total ',spp[3]), spp[1],spp[4])
table1$Year <- as.character(table1$Year)
class(table1)
table2 <- read.csv(here('tables',paste0(date_use,'-survey_by_spp.csv')))
table2
table2$year <- as.character(table2$year)
table2[is.na(table2)] <-""
kableExtra::kable(table2)
# kableExtra::kable(table2, format.args = list(big.mark = ','), digits = 2,
#                   caption = paste0("Table 2. Survey biomass in tons and coefficient of variation (CV) of Hippoglossoides spp. combined (flathead sole and Bering flounder) across the entire BSAI; flathead sole only in the Aleutian Islands, Hippoglossoides spp. combined in the Eastern Bering Sea (EBS) shelf survey, flathead sole only in EBS shelf survey, and Bering flounder only in the EBS shelf survey. Slight discrepancies in totals may occur due to rounding. Bolded years are not included in base model.'Data accessed via Oracle database query on ",date_use_long,".")) %>%
#   kableExtra::kable_styling("striped")
table3 <- read.csv(here('tables',paste0(date_use,'-NBS_survey_by_spp.csv')))
table3
Sys.Date()
thisyear = lubridate::year(Sys.Date())
thisyear
MSY = 126645
here('2020_files','model_runs','run06_francis_tuning','plots','ts4_summary_biomass_(mt).png')
