# STRATUM==999999 &
LENGTH>0) %>%
# mm to cm
droplevels() %>% mutate(LENGTH=LENGTH/10) %>%
# select(YEAR, LENGTH, SEX, FREQUENCY) %>%
group_by(YEAR, LENGTH, SEX) %>%
summarise(FREQUENCY=sum(FREQUENCY)) %>%
tidyr::pivot_wider(names_from = SEX, values_from = FREQUENCY, id_cols = c(YEAR, LENGTH), values_fill = 0)
names(lcomp_raw)[3:4] <- c('MALES','FEMALES')
lcomp <- BIN_LEN_DATA(data=lcomp_raw, len_bins=len_bins) %>%
select(year=YEAR, males=MALES, females=FEMALES, bin=BIN) %>%
## collapse different lengths into bins by year
group_by(year, bin) %>%
summarize(males=sum(males), females=sum(females), .groups='drop') %>%
## don't arrange by year first or it breaks order of wide
## columns below, b/c first year is missing some bins
arrange(bin, year)
lcomp
## Calculate annual totals, turn into proportions, and format for SS
lcomp <- group_by(lcomp, year) %>%
mutate(M_PROP=males/sum(males+females),
F_PROP=females/sum(males+females)) %>% ungroup() %>%
select(-males, -females)
lcomp_fem <- select(lcomp, -M_PROP) %>%
pivot_wider(names_from=bin, names_prefix='f',
values_from='F_PROP', values_fill=0) %>%
arrange(year)
lcomp_fem <- select(lcomp, -M_PROP) %>%
pivot_wider(names_from=bin, names_prefix='f',
values_from='F_PROP', values_fill=0) %>%
arrange(year)
lcomp_male <- select(lcomp, -F_PROP) %>%
pivot_wider(names_from=bin, names_prefix='m',
values_from='M_PROP', values_fill=0) %>%
arrange(year)
lcomp_fem
tmp <-  read.csv(here::here(year,'data','raw','bsai_ts_length_data.csv'))
names(tmp) <- toupper(names(tmp))
tmp <- tmp %>%
filter(SPECIES_CODE %in% afsc_species &
SEX != 3 &
# STRATUM==999999 &
LENGTH>0) %>%
# mm to cm
droplevels() %>% mutate(LENGTH=LENGTH/10)
head(tmp)
tmp %>%
group_by(YEAR, SEX) %>%
summarise(sum(unique(HAULJOIN)))
tmp %>%
group_by(YEAR, SEX) %>%
summarise(length(unique(HAULJOIN)))
## The sample sizes come from the number of hauls with lengths
## which is in this file.
# lcomp_Nsamp <- read.csv('data/lengths_survey_hauls.csv')
lcomp_Nsamp <- tmp %>%
group_by(YEAR, SEX) %>%
summarise(length(unique(HAULJOIN)))
stopifnot(all(lcomp_Nsamp$YEAR == lcomp_fem$year))
SS_lcomp_survey <- data.frame(year=lcomp_fem$year, month=7,
fleet=2, sex=3, part=0, Nsamp=lcomp_Nsamp$HAULS_W_LENGTH,
lcomp_fem[,-1], lcomp_male[,-1])
## The sample sizes come from the number of hauls with lengths
## which is in this file.
# lcomp_Nsamp <- read.csv('data/lengths_survey_hauls.csv')
lcomp_Nsamp <- tmp %>%
group_by(YEAR, SEX) %>%
summarise(HAULS_W_LENGTH=length(unique(HAULJOIN)))
SS_lcomp_survey <- data.frame(year=lcomp_fem$year, month=7,
fleet=2, sex=3, part=0, Nsamp=lcomp_Nsamp$HAULS_W_LENGTH,
lcomp_fem[,-1], lcomp_male[,-1])
names(SS_lcomp_survey)[1:6] <- names(SS_dat$lencomp)[1:6]
stopifnot(all(1==rowSums(SS_lcomp_survey[,-(1:6)])))
SS_lcomp_survey
## The sample sizes come from the number of hauls with lengths
## which is in this file.
# lcomp_Nsamp <- read.csv('data/lengths_survey_hauls.csv')
lcomp_Nsamp <- tmp %>%
group_by(YEAR) %>%
summarise(HAULS_W_LENGTH=length(unique(HAULJOIN)))
SS_lcomp_survey <- data.frame(year=lcomp_fem$year, month=7,
fleet=2, sex=3, part=0, Nsamp=lcomp_Nsamp$HAULS_W_LENGTH,
lcomp_fem[,-1], lcomp_male[,-1])
names(SS_lcomp_survey)[1:6] <- names(SS_dat$lencomp)[1:6]
SS_lcomp_survey <- data.frame(year=lcomp_fem$year, month=7,
fleet=2, sex=3, part=0, Nsamp=lcomp_Nsamp$HAULS_W_LENGTH,
lcomp_fem[,-1], lcomp_male[,-1])
names(SS_lcomp_survey)[1:6] <- names(SS_dat$lencomp)[1:6]
SS_dat$lencomp
SS_lcomp_survey
write.csv(SS_lcomp_survey, here::here(year,'data','output','srv_lengths_ss3.csv'), row.names=FALSE)
message("Saved survey CAAL data in ", here::here(year,'data','output','srv_lengths_ss3.csv'))
stopifnot(all(!is.na(lcomp_Nsamp$HAULS_W_LENGTH)))
comp_fem$year
lcomp_fem$year
mod_2020_new_srv_len <- SS_output(here(year, 'model_runs','18.2c_2020_ss3v33022w-new_srv_lengths'))
compsummary_4 <- SSsummarize(list(mod_2020,mod_2020_new_srv_len))
SSplotComps(mod_2020,fleets=2, subplots = 3, kind = 'LEN',
datonly = TRUE, maxrows = 6,showsampsize = TRUE, showeffN = FALSE)
SSplotComps(mod_2020,fleets=2, subplots = 1, kind = 'LEN',
datonly = TRUE, maxrows = 6,showsampsize = TRUE, showeffN = FALSE)
SSplotComparisons(compsummary_4,
legendlabels = c('Model 18.2c (2020)','Model 18.2c (2020) with new survey length data'),
subplots = 2)
SSplotComps(mod_2020_new_srv_len,fleets=2, subplots = 3, kind = 'LEN',
datonly = TRUE, maxrows = 6,showsampsize = TRUE, showeffN = FALSE)
SSplotComps(mod_2020_new_srv_len,fleets=2, subplots = 1, kind = 'LEN',
datonly = TRUE, maxrows = 6,showsampsize = TRUE, showeffN = FALSE)
tmp
unique(tmp$SURVEY_NAME)
tmp %>% group_by(SURVEY_NAME) %>% summarise(n())
tmp %>% group_by(SURVEY_NAME) %>% summarise(n()) %>% View()
tmp %>% group_by(REGION) %>% summarise(n())
head(tmp)
tmp <-  read.csv(here::here(year,'data','raw','bsai_ts_length_data.csv'))
names(tmp) <- toupper(names(tmp))
tmp <- tmp %>%
filter(SPECIES_CODE %in% afsc_species &
SEX != 3 &
REGION == 'BS' &
# STRATUM==999999 &
LENGTH>0) %>%
# mm to cm
droplevels() %>%
mutate(LENGTH=LENGTH/10)
lcomp_raw <- tmp %>%
group_by(YEAR, LENGTH, SEX) %>%
summarise(FREQUENCY=sum(FREQUENCY)) %>%
tidyr::pivot_wider(names_from = SEX, values_from = FREQUENCY, id_cols = c(YEAR, LENGTH), values_fill = 0)
lcomp_raw
lcomp_raw <- tmp %>%
group_by(YEAR, LENGTH, SEX) %>%
summarise(FREQUENCY=sum(FREQUENCY)) %>%
tidyr::pivot_wider(names_from = SEX, values_from = FREQUENCY, id_cols = c(YEAR, LENGTH), values_fill = 0)
lcomp_raw
lcomp <- BIN_LEN_DATA(data=lcomp_raw, len_bins=len_bins) %>%
select(year=YEAR, males=MALES, females=FEMALES, bin=BIN) %>%
## collapse different lengths into bins by year
group_by(year, bin) %>%
summarize(males=sum(males), females=sum(females), .groups='drop') %>%
## don't arrange by year first or it breaks order of wide
## columns below, b/c first year is missing some bins
arrange(bin, year)
## Calculate annual totals, turn into proportions, and format for SS
lcomp <- group_by(lcomp, year) %>%
mutate(M_PROP=males/sum(males+females),
F_PROP=females/sum(males+females)) %>% ungroup() %>%
select(-males, -females)
lcomp_fem <- select(lcomp, -M_PROP) %>%
pivot_wider(names_from=bin, names_prefix='f',
values_from='F_PROP', values_fill=0) %>%
arrange(year)
lcomp_fem
tmp <-  read.csv(here::here(year,'data','raw','bsai_ts_length_data.csv'))
names(tmp) <- toupper(names(tmp))
tmp <- tmp %>%
filter(SPECIES_CODE %in% afsc_species &
SEX != 3 &
REGION == 'BS' &
YEAR > 1980 &
# STRATUM==999999 &
LENGTH>0) %>%
# mm to cm
droplevels() %>%
mutate(LENGTH=LENGTH/10)
lcomp_raw <- tmp %>%
group_by(YEAR, LENGTH, SEX) %>%
summarise(FREQUENCY=sum(FREQUENCY)) %>%
tidyr::pivot_wider(names_from = SEX, values_from = FREQUENCY, id_cols = c(YEAR, LENGTH), values_fill = 0)
names(lcomp_raw)[3:4] <- c('MALES','FEMALES')
lcomp <- BIN_LEN_DATA(data=lcomp_raw, len_bins=len_bins) %>%
select(year=YEAR, males=MALES, females=FEMALES, bin=BIN) %>%
## collapse different lengths into bins by year
group_by(year, bin) %>%
summarize(males=sum(males), females=sum(females), .groups='drop') %>%
## don't arrange by year first or it breaks order of wide
## columns below, b/c first year is missing some bins
arrange(bin, year)
## Calculate annual totals, turn into proportions, and format for SS
lcomp <- group_by(lcomp, year) %>%
mutate(M_PROP=males/sum(males+females),
F_PROP=females/sum(males+females)) %>% ungroup() %>%
select(-males, -females)
lcomp_fem <- select(lcomp, -M_PROP) %>%
pivot_wider(names_from=bin, names_prefix='f',
values_from='F_PROP', values_fill=0) %>%
arrange(year)
lcomp_male <- select(lcomp, -F_PROP) %>%
pivot_wider(names_from=bin, names_prefix='m',
values_from='M_PROP', values_fill=0) %>%
arrange(year)
lcomp_male
lcomp_fem
lcomp_raw <- tmp %>%
group_by(YEAR, LENGTH, SEX) %>%
summarise(FREQUENCY=sum(FREQUENCY)) %>%
tidyr::pivot_wider(names_from = SEX, values_from = FREQUENCY, id_cols = c(YEAR, LENGTH), values_fill = 0)
View(lcomp_raw)
lcomp_raw
names(lcomp_raw)[3:4] <- c('FEMALES','MALES')
lcomp <- BIN_LEN_DATA(data=lcomp_raw, len_bins=len_bins) %>%
select(year=YEAR, males=MALES, females=FEMALES, bin=BIN) %>%
## collapse different lengths into bins by year
group_by(year, bin) %>%
summarize(males=sum(males), females=sum(females), .groups='drop') %>%
## don't arrange by year first or it breaks order of wide
## columns below, b/c first year is missing some bins
arrange(bin, year)
## Calculate annual totals, turn into proportions, and format for SS
lcomp <- group_by(lcomp, year) %>%
mutate(M_PROP=males/sum(males+females),
F_PROP=females/sum(males+females)) %>% ungroup() %>%
select(-males, -females)
lcomp_fem <- select(lcomp, -M_PROP) %>%
pivot_wider(names_from=bin, names_prefix='f',
values_from='F_PROP', values_fill=0) %>%
arrange(year)
lcomp_male <- select(lcomp, -F_PROP) %>%
pivot_wider(names_from=bin, names_prefix='m',
values_from='M_PROP', values_fill=0) %>%
arrange(year)
lcomp_male
## The sample sizes come from the number of hauls with lengths
## which is in this file.
# lcomp_Nsamp <- read.csv('data/lengths_survey_hauls.csv')
lcomp_Nsamp <- tmp %>%
group_by(YEAR) %>%
summarise(HAULS_W_LENGTH=length(unique(HAULJOIN)))
lcomp_Nsamp
stopifnot(all(lcomp_Nsamp$YEAR == lcomp_fem$year))
stopifnot(all(!is.na(lcomp_Nsamp$HAULS_W_LENGTH)))
SS_lcomp_survey <- data.frame(year=lcomp_fem$year,
month=7,
fleet=2, sex=3, part=0,
Nsamp=lcomp_Nsamp$HAULS_W_LENGTH,
lcomp_fem[,-1], lcomp_male[,-1])
# names(SS_lcomp_survey)[1:6] <- names(SS_dat$lencomp)[1:6]
stopifnot(all(1==rowSums(SS_lcomp_survey[,-(1:6)])))
write.csv(SS_lcomp_survey, here::here(year,'data','output','srv_lengths_ss3.csv'), row.names=FALSE)
message("Saved survey CAAL data in ", here::here(year,'data','output','srv_lengths_ss3.csv'))
write.csv(SS_lcomp_survey, here::here(year,'data','output','srv_lengths_ss3.csv'), row.names=FALSE)
lcomp_male
lcomp_fem
tmp
unique(tmp$SURVEY_NAME)
tmp <-  read.csv(here::here(year,'data','raw','bsai_ts_length_data.csv'))
names(tmp) <- toupper(names(tmp))
tmp %>%
filter(SPECIES_CODE %in% afsc_species &
SEX != 3 &
REGION == 'BS' &
YEAR > 1980 &
grep('Eastern Bergin Sea Bottom Trawl Survey', SURVEY_NAME),
# STRATUM==999999 &
LENGTH>0)
tmp %>%
filter(SPECIES_CODE %in% afsc_species &
SEX != 3 &
REGION == 'BS' &
YEAR > 1980 &
grepL('Eastern Bergin Sea Bottom Trawl Survey', SURVEY_NAME),
# STRATUM==999999 &
LENGTH>0)
tmp %>%
filter(SPECIES_CODE %in% afsc_species &
SEX != 3 &
REGION == 'BS' &
YEAR > 1980 &
grepl('Eastern Bergin Sea Bottom Trawl Survey', SURVEY_NAME),
# STRATUM==999999 &
LENGTH>0)
tmp %>%
filter(SPECIES_CODE %in% afsc_species &
SEX != 3 &
REGION == 'BS' &
YEAR > 1980 &
grepl('Eastern Bering Sea Bottom Trawl Survey', SURVEY_NAME),
# STRATUM==999999 &
LENGTH>0)
tmp <- tmp %>%
filter(SPECIES_CODE %in% afsc_species &
SEX != 3 &
REGION == 'BS' &
YEAR > 1980 &
grepl('Eastern Bering Sea Bottom Trawl Survey', SURVEY_NAME),
# STRATUM==999999 &
LENGTH>0) %>%
# mm to cm
droplevels() %>%
mutate(LENGTH=LENGTH/10)
lcomp_raw <- tmp %>%
group_by(YEAR, LENGTH, SEX) %>%
summarise(FREQUENCY=sum(FREQUENCY)) %>%
tidyr::pivot_wider(names_from = SEX, values_from = FREQUENCY, id_cols = c(YEAR, LENGTH), values_fill = 0)
names(lcomp_raw)[3:4] <- c('FEMALES','MALES')
lcomp <- BIN_LEN_DATA(data=lcomp_raw, len_bins=len_bins) %>%
select(year=YEAR, males=MALES, females=FEMALES, bin=BIN) %>%
## collapse different lengths into bins by year
group_by(year, bin) %>%
summarize(males=sum(males), females=sum(females), .groups='drop') %>%
## don't arrange by year first or it breaks order of wide
## columns below, b/c first year is missing some bins
arrange(bin, year)
## Calculate annual totals, turn into proportions, and format for SS
lcomp <- group_by(lcomp, year) %>%
mutate(M_PROP=males/sum(males+females),
F_PROP=females/sum(males+females)) %>% ungroup() %>%
select(-males, -females)
lcomp_fem <- select(lcomp, -M_PROP) %>%
pivot_wider(names_from=bin, names_prefix='f',
values_from='F_PROP', values_fill=0) %>%
arrange(year)
lcomp_male <- select(lcomp, -F_PROP) %>%
pivot_wider(names_from=bin, names_prefix='m',
values_from='M_PROP', values_fill=0) %>%
arrange(year)
lcomp_fem
## The sample sizes come from the number of hauls with lengths
## which is in this file.
# lcomp_Nsamp <- read.csv('data/lengths_survey_hauls.csv')
lcomp_Nsamp <- tmp %>%
group_by(YEAR) %>%
summarise(HAULS_W_LENGTH=length(unique(HAULJOIN)))
lcomp_Nsamp
tmp <-  read.csv(here::here(year,'data','raw','bsai_ts_length_data.csv'))
unique(tmp$survey_name)
tmp <-  read.csv(here::here(year,'data','raw','bsai_ts_length_data.csv'))
names(tmp) <- toupper(names(tmp))
tmp <- tmp %>%
filter(SPECIES_CODE %in% afsc_species &
SEX != 3 &
REGION == 'BS' &
YEAR > 1980 &
grepl('Eastern Bering Sea', SURVEY_NAME),
# STRATUM==999999 &
LENGTH>0) %>%
# mm to cm
droplevels() %>%
mutate(LENGTH=LENGTH/10)
lcomp_raw <- tmp %>%
group_by(YEAR, LENGTH, SEX) %>%
summarise(FREQUENCY=sum(FREQUENCY)) %>%
tidyr::pivot_wider(names_from = SEX, values_from = FREQUENCY, id_cols = c(YEAR, LENGTH), values_fill = 0)
names(lcomp_raw)[3:4] <- c('FEMALES','MALES')
lcomp <- BIN_LEN_DATA(data=lcomp_raw, len_bins=len_bins) %>%
select(year=YEAR, males=MALES, females=FEMALES, bin=BIN) %>%
## collapse different lengths into bins by year
group_by(year, bin) %>%
summarize(males=sum(males), females=sum(females), .groups='drop') %>%
## don't arrange by year first or it breaks order of wide
## columns below, b/c first year is missing some bins
arrange(bin, year)
## Calculate annual totals, turn into proportions, and format for SS
lcomp <- group_by(lcomp, year) %>%
mutate(M_PROP=males/sum(males+females),
F_PROP=females/sum(males+females)) %>% ungroup() %>%
select(-males, -females)
lcomp_fem <- select(lcomp, -M_PROP) %>%
pivot_wider(names_from=bin, names_prefix='f',
values_from='F_PROP', values_fill=0) %>%
arrange(year)
lcomp_fem
tmp <-  read.csv(here::here(year,'data','raw','bsai_ts_length_data.csv'))
names(tmp) <- toupper(names(tmp))
tmp %>% group_by(YEAR, SURVEY_NAME) %>% summarise(n())
tmp %>% group_by(YEAR, SURVEY_NAME) %>% summarise(n()) %>% View()
View(afscassess::bts_length_comp())
View(afscassess::bts_length_comp)
afscassess::bts_length_comp(year =2024, area = 'bsai',lenbins = len_bins, bysex = TRUE)
## survey marginal ages (ghosted in model) ----
inputN_h <- tmp %>%
group_by(year, sex) %>%
summarise(n_h = length(unique(hauljoin)))
srvage0 <- tmp %>%
group_by(year, sex, age) %>%
summarise(n_combo = n()) %>%
ungroup()%>%
left_join(., inputN_total, by = c('year','sex')) %>%
mutate(freq = n_combo/Nsamp) %>%
select(-n_combo) %>%
tidyr::pivot_wider(names_from = age, values_from = freq, values_fill = 0, names_expand = TRUE)
## note: cole had these all set to nsamp = 200
srvage0 %>%
filter(sex == 1) %>%
merge(., srvage0 %>%
filter(sex == 2) %>%
select(-sex, -Nsamp),
by = c('year'), all.y = FALSE) %>%
filter(year %in%  unique(mod_2020$condbase$Yr)) %>%
arrange(year) %>%
mutate(Seas = 7, FltSvy = -2, Gender = 3, Part = 0, Ageerr = 1, Lbin_lo = -1,
Lbin_hi = -1) %>%
select(year, Seas, FltSvy, Gender, Part, Ageerr, Lbin_lo, Lbin_hi, Nsamp, everything(),
-sex) %>%
write.csv(., file = here::here(year,'data','output','srv_age_ghost_ss3.csv'), row.names = FALSE)
## survey marginal ages (ghosted in model) ----
inputN_h <- tmp %>%
group_by(year, sex) %>%
summarise(n_h = length(unique(hauljoin)))
## survey marginal ages (ghosted in model) ----
tmp <- read.csv(here::here(year, 'data','raw','bsai_ts_length_specimen_data.csv'))  %>%
filter(sex != 3 & !is.na(age) & !is.na(length) & age > 0 & age<plus_age, species_code == 10130) %>%
mutate(
# sex = ifelse(sex == 1,2,1),  ## SS sex is inverse of this dataset
length_grp = cut(round(length/10,0) ,
breaks = seq(0,60,2),
right = FALSE,
labels = FALSE),
length_bin_use = seq(0,60,2)[length_grp])
inputN_h <- tmp %>%
group_by(year, sex) %>%
summarise(n_h = length(unique(hauljoin)))
srvage0 <- tmp %>%
group_by(year, sex, age) %>%
summarise(n_combo = n()) %>%
ungroup()%>%
left_join(., inputN_total, by = c('year','sex')) %>%
mutate(freq = n_combo/Nsamp) %>%
select(-n_combo) %>%
tidyr::pivot_wider(names_from = age, values_from = freq, values_fill = 0, names_expand = TRUE)
inputN_total <- tmp %>%
group_by(year,sex) %>%
dplyr::summarise(Nsamp = n())
srvage0 <- tmp %>%
group_by(year, sex, age) %>%
summarise(n_combo = n()) %>%
ungroup()%>%
left_join(., inputN_total, by = c('year','sex')) %>%
mutate(freq = n_combo/Nsamp) %>%
select(-n_combo) %>%
tidyr::pivot_wider(names_from = age, values_from = freq, values_fill = 0, names_expand = TRUE)
## note: cole had these all set to nsamp = 200
srvage0 %>%
filter(sex == 1) %>%
merge(., srvage0 %>%
filter(sex == 2) %>%
select(-sex, -Nsamp),
by = c('year'), all.y = FALSE) %>%
filter(year %in%  unique(mod_2020$condbase$Yr)) %>%
arrange(year) %>%
mutate(Seas = 7, FltSvy = -2, Gender = 3, Part = 0, Ageerr = 1, Lbin_lo = -1,
Lbin_hi = -1) %>%
select(year, Seas, FltSvy, Gender, Part, Ageerr, Lbin_lo, Lbin_hi, Nsamp, everything(),
-sex) %>%
write.csv(., file = here::here(year,'data','output','srv_age_ghost_ss3.csv'), row.names = FALSE)
## note: cole had these all set to nsamp = 200
srvage0 %>%
filter(sex == 1) %>%
merge(., srvage0 %>%
filter(sex == 2) %>%
select(-sex, -Nsamp),
by = c('year'), all.y = FALSE) %>%
filter(year %in%  unique(mod_2020$condbase$Yr)) %>%
arrange(year) %>%
mutate(Seas = 7, FltSvy = -2, Gender = 3, Part = 0, Ageerr = 1, Lbin_lo = -1,
Lbin_hi = -1) %>%
select(year, Seas, FltSvy, Gender, Part, Ageerr, Lbin_lo, Lbin_hi, Nsamp, everything(),
-sex)
# load ----
## do NOT update odbc or connect() won't work
devtools::install_github("afsc-gap-products/gapindex")
#devtools::install_github("BenWilliams-NOAA/afscassess", force = TRUE)
#devtools::install_github('r4ss/r4ss', force = TRUE)
library(gapindex)
sql_channel <- gapindex::get_connected()
sql_channel <- gapindex::get_connected()
sql_channel <- gapindex::get_connected()
afsc_species
years
gapindex_data <- gapindex::get_data(
year_set = 1980:year,
survey_set = "EBS",
spp_codes = afsc_species,
haul_type = 3,
abundance_haul = "Y",
pull_lengths = T,
sql_channel = sql_channel)
spp_start_year <-
RODBC::sqlQuery(channel = sql_channel,
query = "SELECT * FROM GAP_PRODUCTS.SPECIES_YEAR")
spp_start_year
species
afscdata::bsai_fhs
gapindex_data <- gapindex::get_data(
year_set = 1982:year,
survey_set = "EBS",
spp_codes = afsc_species,
haul_type = 3,
abundance_haul = "Y",
pull_lengths = T,
sql_channel = sql_channel)
production_data <- gapindex::get_data(
year_set = 1982:2023,
survey_set = "EBS",
spp_codes = NULL,
pull_lengths = TRUE,
haul_type = 3,
abundance_haul = "Y",
sql_channel = sql_channel)
spp_start_year <-
RODBC::sqlQuery(channel = sql_channel,
query = "SELECT * FROM GAP_PRODUCTS.SPECIES_YEAR")
spp_start_year
?fix.by
??fix.by
require(r4ss)
tt <- SS_output("C:/Users/maia.kapur/Work/assessments/ai-pcod/2023/model_runs/natm_test")
tt$estimated_non_dev_parameters
tt$parameters
tt <- SS_output("C:/Users/maia.kapur/Work/assessments/ai-pcod/2023/model_runs/natm_test")
packageVersion("gapindex")
R.Version()
