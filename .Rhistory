NSEX = 2,
NAGE = 19,
Nfishery = 1,
rec_age = 3,
max_age = 19, ## not 21?
FY = 1977,
rec_FY = 1977,
rec_LY_decrement =2,
Fratios = 1
))
retrodirs[1]
here('sos',paste0('proj-',int,'y'))
int = 4
here('sos',paste0('proj-',int,'y'))
retrodirs
## copy in the relevant base models
diridx <- ifelse(int ==2, c(2,4,6), c(1,3,5,7))
diridx
## copy in the relevant base models
diridx <- if(int ==2) c(2,4,6) if(int ==4) c(1,3,5,7))
## copy in the relevant base models
diridx <- if(int ==2) c(2,4,6) if(int ==4) c(1,3,5,7)
## copy in the relevant base models
diridx <- if(int ==2) {c(2,4,6)} else{if(int ==4){ c(1,3,5,7)}
retrodirs[diridx]
}
diridx
diridx
if(int ==2) {c(2,4,6)} else{if(int ==4){ c(1,3,5,7)}
## copy in the relevant base models
diridx <- if(int ==2) {c(2,4,6)} else{ c(1,3,5,7)}
diridx
## copy in the relevant base models
if(int ==2) { diridx <-c(2,4,6)} else{ diridx <- c(1,3,5,7)}
diridx
retrodirs[diridx]
retrodirs
sort(retrodirs)
## copy in the relevant base models
if(int ==2) { diridx <-c(1:length(retrodirs))} else{ diridx <- c(1,2,4,6)}
diridx
retrodirs[diridx]
## copy in the relevant base models
if(int ==2) { diridx <-c(1:length(retrodirs))} else{ diridx <- c(7,2,4,6)}
retrodirs[diridx]
?dir.copy
retrodirs[diridx]
x=retrodirs[diridx][1]
x
paste0(homedir, basename(x))
homedir = here('sos',paste0('proj-',int,'y'))
paste0(homedir, basename(x))
paste0(homedir, "/",basename(x)))
paste0(homedir, "/",basename(x))
file.copy(x,paste0(homedir, "/",basename(x)}
lapply(retrodirs[diridx], FUN = function(x){    dir.create(paste0(homedir, "/",basename(x)))
file.copy(x,paste0(homedir, "/",basename(x)))}
))
file.copy(x,paste0(homedir, "/",basename(x)))
lapply(retrodirs[diridx], FUN = function(x){    dir.create(paste0(homedir, "/",basename(x)))
file.copy(x,paste0(homedir, "/",basename(x)))
})
class(retrodirs[diridx])
apply(retrodirs[diridx], FUN = function(x){    dir.create(paste0(homedir, "/",basename(x)))
file.copy(x,paste0(homedir, "/",basename(x)))
})
retrodirs[diridx]
apply(retrodirs[diridx], FUN = function(x){    dir.create(paste0(homedir, "/",basename(x)))
file.copy(x,paste0(homedir, "/",basename(x)))
})
sapply(retrodirs[diridx], FUN = function(x){    dir.create(paste0(homedir, "/",basename(x)))
file.copy(x,paste0(homedir, "/",basename(x)))
})
file.copy(list.files(x),paste0(homedir, "/",basename(x)))
sapply(retrodirs[diridx], FUN = function(x){    dir.create(paste0(homedir, "/",basename(x)))
file.copy(list.files(x),paste0(homedir, "/",basename(x)))
})
ist.files(x)
list.files(x)
file.copy(list.files(x, full.names = T),paste0(homedir, "/",basename(x)))
list.files(x, full.names = T,
pattern = "BSAI_FHS.ctl|dat|.exe|starter|forecast")
## loop through all folders and generate a proj data file within each
lapply(retrodirs, FUN = function(x) write_proj(dir = x,
data_file = 'Model_Proj.dat', ## name of new file - must match what is in spp_catch.dat
data = SS_output(x) , ## model basis
NSEX = 2,
NAGE = 19,
Nfishery = 1,
rec_age = 3,
max_age = 19, ## not 21?
FY = 1977,
rec_FY = 1977,
rec_LY_decrement =2,
Fratios = 1
))
retrodirs[baseidx]
## copy in the relevant base models
if(int ==2) { baseidx <-c(1:length(retrodirs))} else{ baseidx <- c(7,2,4,6)}
retrodirs[baseidx]
as.numeric(gsub('retro','',basename(retrodirs[baseidx]))
)
baseYrs <- 2020+as.numeric(gsub('retro','',basename(retrodirs[baseidx])))
baseYrs
seq(2008,2020,2)[-baseYrs]
baseYrs
seq(2008,2020,2)[-!baseYrs]
which(seq(2008,2020,2) %in% baseyears)
which(seq(2008,2020,2) %in% baseYrs)
seq(2008,2020,2)[!(which( seq(2008,2020,2)%in% baseYrs))
)
seq(2008,2020,2)[!(which( seq(2008,2020,2)%in% baseYrs))]
seq(2008,2020,2
which( seq(2008,2020,2)%in% baseYrs)
seq(2008,2020,2) %in% baseYrs
which(seq(2008,2020,2) %in% baseYrs)
!(which(seq(2008,2020,2) %in% baseYrs))
seq(2008,2020,2)[-(which(seq(2008,2020,2) %in% baseYrs))]
proj_dirs <- paste0(homedir,"/",   seq(2008,2020,2)[-(which(seq(2008,2020,2) %in% baseYrs))])
proj_dirs
baseYrs
## copy in benchmark models at relevant intervals
sapply(retrodirs[baseidx], FUN = function(x){
dir.create(paste0(homedir, "/",basename(x)))
file.copy(list.files(x, full.names = T,
pattern = "BSAI_FHS.ctl|dat|.exe|starter|forecast"),
paste0(homedir, "/full-",2020+as.numeric(gsub('retro','',basename(x)))))
})
2020+as.numeric(gsub('retro','',basename(x)
)
)
paste0(homedir, "/full-",2020+as.numeric(gsub('retro','',basename(x)))
)
list.files(x, full.names = T,
pattern = "BSAI_FHS.ctl|dat|.exe|starter|forecast")
fulldir = paste0(homedir, "/full-",2020+as.numeric(gsub('retro','',basename(x))))
fulldir
dir.create(fulldir)
file.copy(from = list.files(x, full.names = T,
pattern = "BSAI_FHS.ctl|dat|.exe|starter|forecast"),
to=fulldir)
if(int ==2) {seq()} else{ projidx <- c(7,2,4,6)}
proj_dirs <- paste0(homedir,"/proj-",   seq(2008,2020,2)[-(which(seq(2008,2020,2) %in% baseYrs))])
proj_dirs
retrodirs[baseidx],
retrodirs[baseidx]
## copy in benchmark models at relevant intervals
sapply(retrodirs[baseidx], FUN = function(x){
fulldir = paste0(homedir, "/full-",2020+as.numeric(gsub('retro','',basename(x))))
dir.create(fulldir)
file.copy(from = list.files(x, full.names = T,
pattern = "BSAI_FHS.ctl|dat|.exe|starter|forecast"),
to=fulldir)
})
proj_dirs
baseYrs
seq(2008,2020,2)
seq(2008,2020,1)[-(which(seq(2008,2020,1) %in% baseYrs))])
proj_dirs <- paste0(homedir,"/proj-",   seq(2008,2020,1)[-(which(seq(2008,2020,1) %in% baseYrs))])
proj_dirs
# if(int ==2) {seq()} else{ projidx <- c(7,2,4,6)}
proj_years <- seq(2008,2020,1)[-(which(seq(2008,2020,1) %in% baseYrs))]
proj_years
x="C:/Users/maia.kapur/Work/assessments/2022/bsai-fhs-2022/sos/proj-4y/proj-2009"
as.numeric(basename(x))
## identify the most recent year
as.numeric(gsub('proj-','',basename(x)))
## identify the most recent year
projyr = as.numeric(gsub('proj-','',basename(x)))
which.min(abs(baseYrs - projyr))
baseYrs[which.min(abs(baseYrs - projyr))]
projyr=2011
baseYrs[which.min(abs(baseYrs - projyr))]
baseYrs[which.min(baseYrs - projyr)]
## identify the most recent year
projyr = as.numeric(gsub('proj-','',basename(x)))
baseYrs[which.min(baseYrs - projyr)]
base_to_use <- baseYrs[which.min(baseYrs - projyr)]
base_to_use
which.min(baseYrs - projyr)
baseYrs
fulldir[2]
fulldir
retrodirs
baseidx
base_to_use <- paste0('full-',baseYrs[which.min(baseYrs - projyr)])  ## identify the most recent year
base_to_use
base_to_use
yr_to_use <- paste0('full-',baseYrs[which.min(baseYrs - projyr)])  ## identify the most recent year
base_to_use <- paste0(homedir,"/",yr_to_use,"model_proj.dat")
## copy in all benchmark models at relevant intervals
sapply(retrodirs[baseidx], FUN = function(x){
fulldir = paste0(homedir, "/full-",2020+as.numeric(gsub('retro','',basename(x))))
dir.create(fulldir)
file.copy(from = list.files(x, full.names = T),  to=fulldir)
})
base_to_use
paste0(base_to_use,"/model_proj.dat")
base_to_use <- paste0(homedir,"/",yr_to_use)
paste0(base_to_use,"/model_proj.dat")
## bring in the model proj dat file
file.copy(paste0(base_to_use,"/model_proj.dat"), to=x)
paste0(base_to_use,"/model_proj.dat")
x
x="C:/Users/maia.kapur/Work/assessments/2022/bsai-fhs-2022/sos/proj-4y/proj-2009/"
## bring in the model proj dat file
file.copy(paste0(base_to_use,"/model_proj.dat"), to=x)
dir.create(x) ## make the projection folder
projyr <- as.numeric(gsub('proj-','',basename(x)))
yr_to_use <- paste0('full-',baseYrs[which.min(baseYrs - projyr)])  ## identify the most recent year
base_to_use <- paste0(homedir,"/",yr_to_use)
## bring in the model proj dat file
file.copy(paste0(base_to_use,"/model_proj.dat"), to=x)
write_proj_spcat(dir = x,
data_file = 'Model_Proj_spcat.dat', ## name of new file - must match what is in spp_catch.dat
data = SS_output(base_to_use) , ## model basis
ct_yrs = int
)
source(here('2020_files','projection','setup.r'))
## write setup with year-specific catch info
setup(dir = x,
data_file = 'setup.dat', ## name of new file - must match what is in spp_catch.dat
data = SS_output(base_to_use) , ## model basis
nproj = int
)
x
homedir = here('sos',paste0('proj-',int,'y'))
homedir
## copy in the relevant base models
if(int ==2) { baseidx <-c(1:length(retrodirs))} else{ baseidx <- c(7,2,4,6)}
baseYrs <- 2020+as.numeric(gsub('retro','',basename(retrodirs[baseidx]))) ## actual years, in order
## copy in all benchmark models at relevant intervals
sapply(retrodirs[baseidx], FUN = function(x){
fulldir = paste0(homedir, "/full-",2020+as.numeric(gsub('retro','',basename(x))))
dir.create(fulldir)
file.copy(from = list.files(x, full.names = T),  to=fulldir)
})
?file.copy
file.copy(from = list.files(x, full.names = T),  to=fulldir, showWarnings = FALSE)
file.copy(from = list.files(x, full.names = T),  to=fulldir, showWarnings = FALSE)
# if(int ==2) {seq()} else{ projidx <- c(7,2,4,6)}
proj_years <- seq(2008,2020,1)[-(which(seq(2008,2020,1) %in% baseYrs))]
proj_dirs <- paste0(homedir,"/proj-",  proj_years )
## copy in proj info at relevant intervals
sapply(proj_dirs , FUN = function(x){
dir.create(x) ## make the projection folder
projyr <- as.numeric(gsub('proj-','',basename(x)))
## bring in the model proj dat file
yr_to_use <- paste0('full-',baseYrs[which.min(baseYrs - projyr)])  ## identify the most recent year
base_to_use <- paste0(homedir,"/",yr_to_use) ## folder with most recent full assessment
file.copy(paste0(base_to_use,"/model_proj.dat"), to=x)
## write spcat with year-specific catch info
write_proj_spcat(dir = x,
data_file = 'Model_Proj_spcat.dat', ## name of new file - must match what is in spp_catch.dat
data = SS_output(base_to_use) , ## model basis
ct_yrs = int ## eg for 2009 takes proj catch 2008-2011
)
## write setup with year-specific catch info
setup(dir = x,
data_file = 'setup.dat', ## name of new file - must match what is in spp_catch.dat
data = SS_output(base_to_use) , ## model basis
nproj = int
)
})
## copy main
file.copy(here('projection','2021_projections','main.exe'))
## copy main
file.copy(here('projection','2021_projections','main.exe'), x)
## run proj
setwd(x)
system('main.exe')
system('main.exe')
system('main.exe')
system('main.exe')
shell('main.exe')
## copy in proj info at relevant intervals
sapply(proj_dirs , FUN = function(x){
# dir.create(x) ## make the projection folder
# projyr <- as.numeric(gsub('proj-','',basename(x)))
#
# ## bring in the model proj dat file
# yr_to_use <- paste0('full-',baseYrs[which.min(baseYrs - projyr)])  ## identify the most recent year
# base_to_use <- paste0(homedir,"/",yr_to_use) ## folder with most recent full assessment
# file.copy(paste0(base_to_use,"/model_proj.dat"), to=x)
#
# ## write spcat with year-specific catch info
# write_proj_spcat(dir = x,
#        data_file = 'spp_catch.dat', ## name of new file - must match what is in spp_catch.dat
#        data = SS_output(base_to_use) , ## model basis
#       ct_yrs = int ## eg for 2009 takes proj catch 2008-2011
#        )
#
#    ## write setup with year-specific catch info
# setup(dir = x,
#        data_file = 'setup.dat', ## name of new file - must match what is in spp_catch.dat
#        data = SS_output(base_to_use) , ## model basis
#       nproj = int
#        )
## copy main
file.copy(here('projection','2021_projections','main.exe'), x)
## run proj
setwd(x)
shell('main.exe')
})
yr_to_use
this_year = projyr
rec_table1 <-
read.table('percentdb.out') %>%
as.data.frame(stringsAsFactors=FALSE) %>%
transmute(scenario=as.numeric(V2), year=as.numeric(V3), metric=V4,
value=as.numeric(V5)) %>%
filter(year %in% (this_year+1:2) & scenario==1 &
metric %in% c('SSBMean','SSBFofl', 'SSBFabc', 'SSBF100', 'Fofl', 'Fabc')) %>%
arrange(year, metric) %>%
pivot_wider(names_from=year, values_from=value)
rec_table1 <-
read.table(paste0(x,'percentdb.out')) %>%
as.data.frame(stringsAsFactors=FALSE) %>%
transmute(scenario=as.numeric(V2), year=as.numeric(V3), metric=V4,
value=as.numeric(V5)) %>%
filter(year %in% (this_year+1:2) & scenario==1 &
metric %in% c('SSBMean','SSBFofl', 'SSBFabc', 'SSBF100', 'Fofl', 'Fabc')) %>%
arrange(year, metric) %>%
pivot_wider(names_from=year, values_from=value)
read.table(paste0(x,'percentdb.out'))
x
rec_table1 <-
read.table(paste0(x,'/percentdb.out')) %>%
as.data.frame(stringsAsFactors=FALSE) %>%
transmute(scenario=as.numeric(V2), year=as.numeric(V3), metric=V4,
value=as.numeric(V5)) %>%
filter(year %in% (this_year+1:2) & scenario==1 &
metric %in% c('SSBMean','SSBFofl', 'SSBFabc', 'SSBF100', 'Fofl', 'Fabc')) %>%
arrange(year, metric) %>%
pivot_wider(names_from=year, values_from=value)
read.table(paste0(x,'/percentdb.out'))
## copy in proj info at relevant intervals
sapply(proj_dirs , FUN = function(x){
dir.create(x) ## make the projection folder
projyr <- as.numeric(gsub('proj-','',basename(x)))
## bring in the model proj dat file
yr_to_use <- paste0('full-',baseYrs[which.min(baseYrs - projyr)])  ## identify the most recent year
base_to_use <- paste0(homedir,"/",yr_to_use) ## folder with most recent full assessment
file.copy(paste0(base_to_use,"/model_proj.dat"), to=x)
## write spcat with year-specific catch info
write_proj_spcat(dir = x,
data_file = 'spp_catch.dat', ## name of new file - must match what is in spp_catch.dat
data = SS_output(base_to_use) , ## model basis
ct_yrs = int ## eg for 2009 takes proj catch 2008-2011
)
## write setup with year-specific catch info
setup(dir = x,
data_file = 'setup.dat', ## name of new file - must match what is in spp_catch.dat
data = SS_output(base_to_use) , ## model basis
nproj = int
)
## copy main
file.copy(here('projection','2021_projections','main.exe'), x)
## run proj
setwd(x)
shell('main.exe')
# this_year = projyr
# rec_table1 <-
#   read.table(paste0(x,'/percentdb.out')) %>%
#   as.data.frame(stringsAsFactors=FALSE) %>%
#   transmute(scenario=as.numeric(V2), year=as.numeric(V3), metric=V4,
#             value=as.numeric(V5)) %>%
#   filter(year %in% (this_year+1:2) & scenario==1 &
#            metric %in% c('SSBMean','SSBFofl', 'SSBFabc', 'SSBF100', 'Fofl', 'Fabc')) %>%
#   arrange(year, metric) %>%
#   pivot_wider(names_from=year, values_from=value)
# rec_table1[3:6,3:4] <- 1000*rec_table1[3:6,3:4]
#
# rec_table2 <-
#   read.table('alt2_proj.out', header=TRUE) %>%
#   filter(Year %in% (this_year+1:2)) %>%
#   pivot_longer(cols=c(-Stock, -Year), names_to='metric', values_to='value') %>%
#   pivot_wider(names_from=Year, values_from=value)
# rec_table1$scenario <- rec_table2$Stock <- NULL
# rec_table2[,2:3] <- 1000*rec_table2[,2:3]
# rec_table <- bind_rows(rec_table1, rec_table2)
#
# ## change order to match SAFE format & magnitudes
# rec_table <- rec_table[c(11,6,3,5,4,2,1,1,9,8,8),]
#
# write.csv(rec_table, 'rec_table.csv', row.names=FALSE)
})
## write setup with year-specific catch info
setup(dir = x,
sdir = "data/",
data_file = 'setup.dat', ## name of new file - must match what is in spp_catch.dat
data = SS_output(base_to_use) , ## model basis
nproj = int
)
x
dir.create(paste0(x,"/data"))
paste0(x,"/data")
dir.create(paste0(x,"data"))
paste0(x,"data")
dir.create(paste0(x,"data"))
## write spcat with year-specific catch info
write_proj_spcat(dir = x,
sdir = "data/",
data_file = 'spp_catch.dat', ## name of new file - must match what is in spp_catch.dat
data = SS_output(base_to_use) , ## model basis
ct_yrs = int ## eg for 2009 takes proj catch 2008-2011
)
# if(int ==2) {seq()} else{ projidx <- c(7,2,4,6)}
proj_years <- seq(2008,2020,1)[-(which(seq(2008,2020,1) %in% baseYrs))]
proj_dirs <- paste0(homedir,"/proj-",  proj_years )
proj_dirs
x
dir.create(x) ## make the projection folder
dir.create(paste0(x,"data"))
.
.
.
.
projyr <- as.numeric(gsub('proj-','',basename(x)))
## bring in the model proj dat file
yr_to_use <- paste0('full-',baseYrs[which.min(baseYrs - projyr)])  ## identify the most recent year
base_to_use <- paste0(homedir,"/",yr_to_use) ## folder with most recent full assessment
file.copy(paste0(base_to_use,"/model_proj.dat"), to=x)
## write spcat with year-specific catch info
write_proj_spcat(dir = x,
sdir = "data/",
data_file = 'spp_catch.dat', ## name of new file - must match what is in spp_catch.dat
data = SS_output(base_to_use) , ## model basis
ct_yrs = int ## eg for 2009 takes proj catch 2008-2011
)
## write setup with year-specific catch info
setup(dir = x,
sdir = "data/",
data_file = 'setup.dat', ## name of new file - must match what is in spp_catch.dat
data = SS_output(base_to_use) , ## model basis
nproj = int
)
## copy main
file.copy(here('projection','2021_projections','main.exe'), x)
## copy main
file.copy(here('projection','2021_projections','main.exe'), xdata)
xdata
xdata <- dir.create(paste0(x,"data"))
## copy main
file.copy(here('projection','2021_projections','main.exe'), xdata)
xdata
xdata <- paste0(x,"data")
## copy main
file.copy(here('projection','2021_projections','main.exe'), xdata)
file.copy(here('projection','2021_projections','tacpar.dat'), xdata)
## run proj
setwd(x)
shell('main.exe')
system('main.exe')
tinytex::install_tinytex()
master_table3 <- master_table2 %>% select(refYr, interval, variable, value) %>% pivot_wider(names_from = variable)
require(r4ss)
require(here)
require(tidyverse)
require(dplyr)
require(ggplot2)
theme_set(ggsidekick::theme_sleek())
## these are from 2020_files/projections, but removed the sdir argument
# source(here('projection','write_proj.r'))
# source(here('projection','write_proj_spcat.r'))#
# source(here('projection','setup.r'))
master_table3 <- master_table2 %>% select(refYr, interval, variable, value) %>% pivot_wider(names_from = variable)
master_table <- bind_rows(read.csv(here('sos','2022-05-11-proj-2y','master_table.csv'))  ,
read.csv(here('sos','2022-05-11-proj-4y','master_table.csv'))  )
## plot results
master_table2 <- master_table %>%
filter(refYr == assessment_year+1)  %>%## only use one year ahead
reshape2::melt(id = names(master_table)[c(1:4,7)]) %>%
mutate(value = value/1000)
true_rps <- t(read.csv(here('sos','2021-11-12-BSAI_harvest_specs_1986_2021new.csv')) ) %>%
as.data.frame() %>%
mutate(YEAR = row.names(.),
V2= as.numeric(gsub(",","",V2)),
yr =as.numeric( substr(YEAR,2,5))) %>%
filter(V1 == 'OFL'  | V1 == 'ABC') %>%
mutate(refYr = yr, variable = V1, value = V2,
assessment_year = NA,  assessment_used = NA,
interval = NA , assessment_type = 'Federal Register') %>%
select(names(master_table2))
ggplot(data = master_table2,
aes(x = refYr, y = value,
group =    factor(assessment_type),
col =  factor(assessment_type)))+
theme(legend.position = 'top') +
geom_point()+
scale_x_continuous(limits = c(2008,2020),breaks = seq(2008,2020,2)) +
scale_y_continuous(limits = c(0,100000))+
scale_color_manual(values = c(alpha('goldenrod',0.8),alpha('blue',0.5),
alpha('blue',0.8), alpha('goldenrod',0.5)),
labels = c("Full Assessment", 'Update (proj only)')) +
labs(x = 'Management Year', col = '',  y = '')  +
facet_grid(c("variable", "interval"),
labeller = "label_both",
scales = "free")
# ggsave(last_plot(), file = paste0(homedir,"/refpts.png"),
#        width =8, height = 6)
master_table3 <- master_table2 %>% select(refYr, interval, variable, value) %>% pivot_wider(names_from = variable)
merge(master_table3 %>% filter(interval == 2), master_table3 %>% filter(interval == 4), by = 'refYr') %>%
mutate(ABC_pDiff =paste0(100*round(( ABC.y - ABC.x)/ABC.x,3),"%"),
OFL_pDiff = paste0(100*round(( OFL.y - OFL.x)/OFL.x,3),"%")) %>%
select(refYr,
"2 year ABC"= ABC.x ,
"4 year ABC"= ABC.y ,
"2 year OFL"= OFL.x ,
"4 year OFL"= OFL.y ,
ABC_pDiff, OFL_pDiff) %>%
filter(refYr < 2020)
